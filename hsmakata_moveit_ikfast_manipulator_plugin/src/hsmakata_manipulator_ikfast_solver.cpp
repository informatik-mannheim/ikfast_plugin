/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-08-26 12:14:16.926521
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((IkReal(1.00000000000000))*(x6));
x11=((IkReal(0.139000000000000))*(x2));
x12=((IkReal(1.00000000000000))*(x5));
x13=((IkReal(0.139000000000000))*(x3));
x14=((IkReal(0.302800000000000))*(x2));
x15=((IkReal(1.00000000000000))*(x7));
x16=((IkReal(1.00000000000000))*(x2));
x17=((IkReal(0.302800000000000))*(x3));
x18=((x1)*(x6));
x19=((x0)*(x1));
x20=((x4)*(x6));
x21=((x1)*(x3));
x22=((x3)*(x4));
x23=((x0)*(x4));
IkReal x24=((IkReal(1.00000000000000))*(x23));
eetrans[0]=((((IkReal(0.190000000000000))*(x19)))+(((x11)*(x19)))+(((x7)*(((((x14)*(x23)))+(((x17)*(x19)))))))+(((IkReal(-1.00000000000000))*(x13)*(x24)))+(((x5)*(((((x14)*(x19)))+(((IkReal(-1.00000000000000))*(x17)*(x24))))))));
IkReal x25=((IkReal(1.00000000000000))*(x20));
eetrans[1]=((((x5)*(((((x14)*(x18)))+(((IkReal(-1.00000000000000))*(x17)*(x25)))))))+(((IkReal(0.190000000000000))*(x18)))+(((x7)*(((((x14)*(x20)))+(((x17)*(x18)))))))+(((x11)*(x18)))+(((IkReal(-1.00000000000000))*(x13)*(x25))));
eetrans[2]=((IkReal(0.201500000000000))+(((x5)*(((((x1)*(x17)))+(((x14)*(x4)))))))+(((x1)*(x13)))+(((x11)*(x4)))+(((IkReal(0.190000000000000))*(x4)))+(((x7)*(((((IkReal(-1.00000000000000))*(x1)*(x14)))+(((x17)*(x4))))))));
eerot[0]=((((IkReal(-1.00000000000000))*(x8)*(((((x12)*(((((x19)*(x3)))+(((x2)*(x23)))))))+(((x15)*(((((IkReal(-1.00000000000000))*(x16)*(x19)))+(((IkReal(1.00000000000000))*(x0)*(x22)))))))))))+(((IkReal(-1.00000000000000))*(x10)*(x9))));
eerot[1]=((((x0)*(x9)))+(((IkReal(-1.00000000000000))*(x8)*(((((x15)*(((((IkReal(-1.00000000000000))*(x1)*(x10)*(x2)))+(((x10)*(x22)))))))+(((x12)*(((((x18)*(x3)))+(((x2)*(x20))))))))))));
IkReal x26=((IkReal(1.00000000000000))*(x16));
eerot[2]=((IkReal(-1.00000000000000))*(x8)*(((((x15)*(((((IkReal(-1.00000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x26)*(x4)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x1)*(x26)))+(x22))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.201500000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x27=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j0array[0]=((IkReal(-1.00000000000000))*(x27));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x27))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((IkReal(0.433867360000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.0725336800000000))*(pp)*((r02)*(r02))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(0.0824347984000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-0.433867360000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.433867360000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0824347984000000))*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.433867360000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.0235301107591712))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(0.433867360000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.00147466871641440))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0569307184000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.299635360000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.433867360000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.433867360000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(0.139365516800000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(0.299635360000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.139365516800000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.216933680000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.299635360000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0117650553795856))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.299635360000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.433867360000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.0117650553795856))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.289467360000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.433867360000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.216933680000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.0569307184000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.0824347984000000))*(cj0)*(py)*(r00)*(r01)))+(((IkReal(0.0824347984000000))*(px)*(r00)*(r01)*(sj0)))+(((IkReal(0.433867360000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.433867360000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00)))));
op[1]=((((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0529588963840000))*(r01)*(r02)*(sj0)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.164869596800000))*(pz)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.113861436800000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-0.113861436800000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(0.113861436800000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(-0.164869596800000))*(px)*(r00)*(r02)))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-0.113861436800000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.113861436800000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.164869596800000))*(py)*(r01)*(r02)))+(((IkReal(-0.113861436800000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.0529588963840000))*(cj0)*(r00)*(r02)))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(-0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.227722873600000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00)))));
op[2]=((((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.288800000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-0.287465280000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(32.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.0294287856248288))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(16.0000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.287465280000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(0.143732640000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.722667360000000))*(pp)*((r02)*(r02))))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(32.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-0.0294287856248288))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(16.0000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.287465280000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.287465280000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.134232000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.555929280000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-0.0588575712496576))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-0.555929280000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(8.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(2.02293472000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.0500095589511712))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.287465280000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-0.287465280000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(2.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-0.555929280000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.288800000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(32.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(2.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.287465280000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.287465280000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(0.134232000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(16.0000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.268464000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.134232000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.287465280000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.555929280000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.143732640000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(2.02293472000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(1.73413472000000))*((pz)*(pz))*((r02)*(r02)))));
op[3]=((((IkReal(-6.08000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-0.577600000000000))*(cj0)*(pp)*(r00)*(r02)))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-3.04000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.0529588963840000))*(r01)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.164869596800000))*(pz)*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.113861436800000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(0.577600000000000))*(cj0)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.113861436800000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.113861436800000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(pz)*((r00)*(r00))))+(((IkReal(3.04000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.164869596800000))*(px)*(r00)*(r02)))+(((IkReal(-6.08000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.577600000000000))*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.577600000000000))*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-0.113861436800000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(3.04000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.113861436800000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.164869596800000))*(py)*(r01)*(r02)))+(((IkReal(-0.113861436800000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-6.08000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.577600000000000))*(cj0)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.0529588963840000))*(cj0)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(0.577600000000000))*(cj0)*(px)*(py)*(r01)*(r02)))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-6.08000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-0.577600000000000))*(pp)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.577600000000000))*(px)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.227722873600000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-3.04000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.577600000000000))*(px)*(pz)*(r00)*(r01)*(sj0))));
op[4]=((((IkReal(0.433867360000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.139365516800000))*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288800000000000))*(px)*(py)*(r00)*(r01)))+((((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.0725336800000000))*(pp)*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*((r00)*(r00))))+(((IkReal(4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0569307184000000))*(py)*(sj0)*((r02)*(r02))))+(((IkReal(0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r01)))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(0.0569307184000000))*(cj0)*(px)*((r02)*(r02))))+(((IkReal(-0.433867360000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(0.433867360000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.433867360000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.0235301107591712))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(0.433867360000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.00147466871641440))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((pz)*(pz))*((r00)*(r00))))+((((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-3.04000000000000))*(cj0)*(py)*(r00)*(r01)*((px)*(px))))+(((IkReal(0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(0.299635360000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.433867360000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.433867360000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.299635360000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(cj0)*(px)*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.52000000000000))*(cj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.0824347984000000))*(py)*(sj0)*((r01)*(r01))))+((((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.216933680000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(0.299635360000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.760000000000000))*(pp)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0117650553795856))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.299635360000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.433867360000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(0.0117650553795856))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r02)*((px)*(px))))+(((IkReal(0.289467360000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.0824347984000000))*(px)*(r00)*(r01)*(sj0)))+(((IkReal(8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r02)))+(((IkReal(8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.0824347984000000))*(cj0)*(px)*((r00)*(r00))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.433867360000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.216933680000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(py)*(sj0)*((px)*(px))*((r00)*(r00))))+(((IkReal(4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.139365516800000))*(cj0)*(pz)*(r00)*(r02)))+(((IkReal(-1.52000000000000))*(cj0)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pp)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.52000000000000))*(cj0)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-1.52000000000000))*(r01)*(r02)*(sj0)*((pz)*(pz)*(pz))))+(((IkReal(0.433867360000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.433867360000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0824347984000000))*(cj0)*(py)*(r00)*(r01))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x28=(pz)*(pz);
IkReal x29=(py)*(py);
IkReal x30=(px)*(px);
IkReal x31=((r01)*(sj0));
IkReal x32=((IkReal(0.190000000000000))*(cj1));
IkReal x33=((pp)*(sj1));
IkReal x34=((IkReal(1.00000000000000))*(r02));
IkReal x35=((IkReal(2.00000000000000))*(pz));
IkReal x36=((IkReal(1.00000000000000))*(pz));
IkReal x37=((IkReal(0.380000000000000))*(pz));
IkReal x38=((py)*(sj1));
IkReal x39=((px)*(sj0));
IkReal x40=((cj0)*(r00));
IkReal x41=((IkReal(1.00000000000000))*(cj1));
IkReal x42=((cj0)*(py));
IkReal x43=((IkReal(2.00000000000000))*(sj1));
IkReal x44=((IkReal(0.0361000000000000))*(cj1));
IkReal x45=((IkReal(0.0361000000000000))*(sj1));
IkReal x46=((IkReal(2.00000000000000))*(cj1));
IkReal x47=((IkReal(0.190000000000000))*(sj1));
IkReal x48=((cj0)*(r01));
IkReal x49=((py)*(r01));
IkReal x50=((px)*(r00));
IkReal x51=((py)*(r02)*(sj0));
IkReal x52=((cj0)*(px)*(r02));
IkReal x53=((r02)*(x28));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x39)))+(x42));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x48));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x34)))+(((sj1)*(x31)))+(((sj1)*(x40))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(pz)*(x34)))+(((r02)*(x47)))+(((x31)*(x32)))+(((x32)*(x40)))+(((IkReal(-1.00000000000000))*(x50))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x31)*(x41)))+(((IkReal(-1.00000000000000))*(x40)*(x41)))+(((IkReal(-1.00000000000000))*(sj1)*(x34))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x36)*(x40)))+(((IkReal(-1.00000000000000))*(r02)*(x32)))+(((x40)*(x47)))+(((IkReal(-1.00000000000000))*(x31)*(x36)))+(x51)+(x52)+(((x31)*(x47))));
evalcond[7]=((((x30)*(x40)*(x46)))+(((IkReal(-0.380000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(r02)*(x37)))+(((x29)*(x31)*(x46)))+(((x40)*(x44)))+(((cj1)*(x35)*(x52)))+(((cj1)*(x35)*(x51)))+(((r01)*(x35)*(x38)))+(((IkReal(-0.380000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(pp)*(x31)*(x41)))+(((IkReal(-1.00000000000000))*(x33)*(x34)))+(((IkReal(-1.00000000000000))*(pp)*(x40)*(x41)))+(((r02)*(x45)))+(((x43)*(x53)))+(((x31)*(x44)))+(((py)*(r00)*(x39)*(x46)))+(((px)*(r01)*(x42)*(x46)))+(((sj1)*(x35)*(x50))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r02)*(x44)))+(((IkReal(-1.00000000000000))*(x37)*(x40)))+(((x40)*(x45)))+(((IkReal(0.380000000000000))*(x52)))+(((IkReal(0.380000000000000))*(x51)))+(((cj1)*(x35)*(x50)))+(((IkReal(-1.00000000000000))*(x29)*(x31)*(x43)))+(((IkReal(-1.00000000000000))*(x31)*(x37)))+(((IkReal(-2.00000000000000))*(px)*(x38)*(x48)))+(((IkReal(-2.00000000000000))*(r00)*(x38)*(x39)))+(((IkReal(-1.00000000000000))*(x30)*(x40)*(x43)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x34)))+(((IkReal(-1.00000000000000))*(sj1)*(x35)*(x52)))+(((cj1)*(x35)*(x49)))+(((x46)*(x53)))+(((x31)*(x45)))+(((x31)*(x33)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x35)*(x38)))+(((x33)*(x40))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x54=((IkReal(4.51422217576005))*(cj1));
cj3array[0]=((IkReal(-0.889881964969636))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x54)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x54)))+(((IkReal(-4.51422217576005))*(pz)*(sj1)))+(((IkReal(11.8795320414738))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x55=((px)*(sj0));
IkReal x56=((IkReal(2.00000000000000))*(py));
IkReal x57=((cj0)*(r01));
IkReal x58=((pz)*(r02));
IkReal x59=((r00)*(sj0));
IkReal x60=((IkReal(0.380000000000000))*(cj1));
IkReal x61=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x62=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(-0.111008840000000))+(((pp)*(x57)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x56)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x60)))+(((x59)*(x62)))+(((IkReal(0.0361000000000000))*(x57)))+(((IkReal(-1.00000000000000))*(pp)*(x59)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x55)))+(((IkReal(-1.00000000000000))*(cj0)*(x56)*(x58)))+(((IkReal(-1.00000000000000))*(x55)*(x61)))+(((r01)*(x55)*(x56)))+(((IkReal(2.00000000000000))*(x55)*(x58)))+(((cj0)*(py)*(x61)))+(((IkReal(-0.0841784000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(py)*(x56)*(x57)))+(((IkReal(-0.0361000000000000))*(x59)))+(((py)*(r00)*(x60)))+(((IkReal(-1.00000000000000))*(x57)*(x62))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x63=((IkReal(1892500.00000000))*(cj3));
IkReal x64=((cj1)*(px));
IkReal x65=((IkReal(868750.000000000))*(r02));
IkReal x66=((pz)*(sj1));
IkReal x67=((IkReal(1892500.00000000))*(sj3));
IkReal x68=((IkReal(868750.000000000))*(py));
IkReal x69=((r00)*(sj1));
IkReal x70=((cj1)*(sj0));
IkReal x71=((pz)*(r00));
IkReal x72=((r02)*(sj0));
IkReal x73=((px)*(r01)*(sj1));
IkReal x74=((cj0)*(cj1)*(py));
IkReal x75=((cj0)*(cj1)*(pz)*(r01));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x66)*(x67)))+(((IkReal(868750.000000000))*(x70)*(x71)))+(((IkReal(-868750.000000000))*(x75)))+(((IkReal(-1.00000000000000))*(cj0)*(x64)*(x67)))+(((IkReal(-1.00000000000000))*(x63)*(x75)))+(((IkReal(-1.00000000000000))*(x63)*(x64)*(x72)))+(((x63)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(py)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(x68)*(x69)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x63)*(x69)))+(((x63)*(x73)))+(((IkReal(868750.000000000))*(x73)))+(((r02)*(x63)*(x74)))+(((x65)*(x74)))+(((IkReal(-1.00000000000000))*(sj0)*(x64)*(x65))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(py)*(x63)*(x70)))+(((x64)*(x67)*(x72)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-868750.000000000))*(cj0)*(x64)))+(((IkReal(-868750.000000000))*(x66)))+(((py)*(x67)*(x69)))+(((IkReal(-1.00000000000000))*(x67)*(x70)*(x71)))+(((x67)*(x75)))+(((IkReal(-1.00000000000000))*(x67)*(x73)))+(((IkReal(-1.00000000000000))*(x68)*(x70)))+(((IkReal(-1.00000000000000))*(r02)*(x67)*(x74)))+(((IkReal(-1.00000000000000))*(cj0)*(x63)*(x64)))+(((IkReal(-1.00000000000000))*(x63)*(x66))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(x66)*(x67)))+(((IkReal(868750.000000000))*(x70)*(x71)))+(((IkReal(-868750.000000000))*(x75)))+(((IkReal(-1.00000000000000))*(cj0)*(x64)*(x67)))+(((IkReal(-1.00000000000000))*(x63)*(x75)))+(((IkReal(-1.00000000000000))*(x63)*(x64)*(x72)))+(((x63)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(py)*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(x68)*(x69)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x63)*(x69)))+(((x63)*(x73)))+(((IkReal(868750.000000000))*(x73)))+(((r02)*(x63)*(x74)))+(((x65)*(x74)))+(((IkReal(-1.00000000000000))*(sj0)*(x64)*(x65)))))), ((gconst8)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(py)*(x63)*(x70)))+(((x64)*(x67)*(x72)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-868750.000000000))*(cj0)*(x64)))+(((IkReal(-868750.000000000))*(x66)))+(((py)*(x67)*(x69)))+(((IkReal(-1.00000000000000))*(x67)*(x70)*(x71)))+(((x67)*(x75)))+(((IkReal(-1.00000000000000))*(x67)*(x73)))+(((IkReal(-1.00000000000000))*(x68)*(x70)))+(((IkReal(-1.00000000000000))*(r02)*(x67)*(x74)))+(((IkReal(-1.00000000000000))*(cj0)*(x63)*(x64)))+(((IkReal(-1.00000000000000))*(x63)*(x66)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x76=IKsin(j2);
IkReal x77=IKcos(j2);
IkReal x78=((px)*(sj1));
IkReal x79=((py)*(sj1));
IkReal x80=((IkReal(1.00000000000000))*(r00));
IkReal x81=((cj1)*(sj0));
IkReal x82=((IkReal(1.00000000000000))*(px));
IkReal x83=((IkReal(1.00000000000000))*(pz));
IkReal x84=((cj0)*(r01));
IkReal x85=((pz)*(sj1));
IkReal x86=((cj0)*(cj1));
IkReal x87=((IkReal(0.139000000000000))*(x76));
IkReal x88=((IkReal(0.139000000000000))*(x77));
IkReal x89=((IkReal(0.302800000000000))*(x76));
IkReal x90=((IkReal(0.302800000000000))*(x77));
IkReal x91=((cj3)*(x89));
IkReal x92=((sj3)*(x90));
IkReal x93=((cj3)*(x90));
IkReal x94=((sj3)*(x89));
IkReal x95=((x87)+(x91));
IkReal x96=((x88)+(x93)+(x94));
evalcond[0]=((((cj0)*(x78)))+(x95)+(((sj0)*(x79)))+(((IkReal(-1.00000000000000))*(cj1)*(x83)))+(((IkReal(-1.00000000000000))*(x92))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x82)*(x86)))+(((IkReal(-1.00000000000000))*(sj1)*(x83)))+(((IkReal(-1.00000000000000))*(py)*(x81)))+(x96));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x83)*(x84)))+(((IkReal(-1.00000000000000))*(x79)*(x80)))+(((pz)*(r00)*(x81)))+(x95)+(((IkReal(-1.00000000000000))*(x92)))+(((IkReal(-1.00000000000000))*(r02)*(x81)*(x82)))+(((py)*(r02)*(x86)))+(((r01)*(x78))));
evalcond[3]=((((x84)*(x85)))+(((IkReal(-0.190000000000000))*(x84)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x80)))+(((r02)*(sj0)*(x78)))+(((IkReal(-1.00000000000000))*(x96)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x79)))+(((IkReal(-1.00000000000000))*(sj0)*(x80)*(x85))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x97=((cj1)*(pz));
IkReal x98=((IkReal(1892500.00000000))*(sj1));
IkReal x99=((py)*(sj0));
IkReal x100=((IkReal(1892500.00000000))*(sj3));
IkReal x101=((IkReal(868750.000000000))*(sj1));
IkReal x102=((IkReal(1892500.00000000))*(cj3));
IkReal x103=((cj0)*(px));
IkReal x104=((cj1)*(x103));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(x102)*(x97)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x98)))+(((IkReal(-1.00000000000000))*(x100)*(x104)))+(((IkReal(-868750.000000000))*(x97)))+(((x101)*(x99)))+(((cj3)*(x103)*(x98)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x99)))+(((cj3)*(x98)*(x99)))+(((x101)*(x103))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(pz)*(x101)))+(((IkReal(-1.00000000000000))*(cj1)*(x102)*(x99)))+(((IkReal(-1.00000000000000))*(sj3)*(x98)*(x99)))+(((x100)*(x97)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x98)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x103)*(x98)))+(((IkReal(-868750.000000000))*(cj1)*(x99)))+(((IkReal(-868750.000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x104))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(x102)*(x97)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x98)))+(((IkReal(-1.00000000000000))*(x100)*(x104)))+(((IkReal(-868750.000000000))*(x97)))+(((x101)*(x99)))+(((cj3)*(x103)*(x98)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x100)*(x99)))+(((cj3)*(x98)*(x99)))+(((x101)*(x103)))))), ((gconst7)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(pz)*(x101)))+(((IkReal(-1.00000000000000))*(cj1)*(x102)*(x99)))+(((IkReal(-1.00000000000000))*(sj3)*(x98)*(x99)))+(((x100)*(x97)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x98)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x103)*(x98)))+(((IkReal(-868750.000000000))*(cj1)*(x99)))+(((IkReal(-868750.000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x104)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x105=IKsin(j2);
IkReal x106=IKcos(j2);
IkReal x107=((px)*(sj1));
IkReal x108=((py)*(sj1));
IkReal x109=((IkReal(1.00000000000000))*(r00));
IkReal x110=((cj1)*(sj0));
IkReal x111=((IkReal(1.00000000000000))*(px));
IkReal x112=((IkReal(1.00000000000000))*(pz));
IkReal x113=((cj0)*(r01));
IkReal x114=((pz)*(sj1));
IkReal x115=((cj0)*(cj1));
IkReal x116=((IkReal(0.139000000000000))*(x105));
IkReal x117=((IkReal(0.139000000000000))*(x106));
IkReal x118=((IkReal(0.302800000000000))*(x105));
IkReal x119=((IkReal(0.302800000000000))*(x106));
IkReal x120=((cj3)*(x118));
IkReal x121=((sj3)*(x119));
IkReal x122=((cj3)*(x119));
IkReal x123=((sj3)*(x118));
IkReal x124=((x120)+(x116));
IkReal x125=((x122)+(x123)+(x117));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x112)))+(((IkReal(-1.00000000000000))*(x121)))+(x124)+(((cj0)*(x107)))+(((sj0)*(x108))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x112)))+(((IkReal(-1.00000000000000))*(x111)*(x115)))+(x125)+(((IkReal(-1.00000000000000))*(py)*(x110))));
evalcond[2]=((((pz)*(r00)*(x110)))+(((py)*(r02)*(x115)))+(((IkReal(-1.00000000000000))*(x121)))+(x124)+(((IkReal(-1.00000000000000))*(cj1)*(x112)*(x113)))+(((r01)*(x107)))+(((IkReal(-1.00000000000000))*(x108)*(x109)))+(((IkReal(-1.00000000000000))*(r02)*(x110)*(x111))));
evalcond[3]=((((x113)*(x114)))+(((IkReal(-1.00000000000000))*(x125)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x109)))+(((IkReal(-0.190000000000000))*(x113)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj0)*(x109)*(x114)))+(((r02)*(sj0)*(x107)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x108))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x126=(pz)*(pz);
IkReal x127=(py)*(py);
IkReal x128=(px)*(px);
IkReal x129=((r01)*(sj0));
IkReal x130=((IkReal(0.190000000000000))*(cj1));
IkReal x131=((pp)*(sj1));
IkReal x132=((IkReal(1.00000000000000))*(r02));
IkReal x133=((IkReal(2.00000000000000))*(pz));
IkReal x134=((IkReal(1.00000000000000))*(pz));
IkReal x135=((IkReal(0.380000000000000))*(pz));
IkReal x136=((py)*(sj1));
IkReal x137=((px)*(sj0));
IkReal x138=((cj0)*(r00));
IkReal x139=((IkReal(1.00000000000000))*(cj1));
IkReal x140=((cj0)*(py));
IkReal x141=((IkReal(2.00000000000000))*(sj1));
IkReal x142=((IkReal(0.0361000000000000))*(cj1));
IkReal x143=((IkReal(0.0361000000000000))*(sj1));
IkReal x144=((IkReal(2.00000000000000))*(cj1));
IkReal x145=((IkReal(0.190000000000000))*(sj1));
IkReal x146=((cj0)*(r01));
IkReal x147=((py)*(r01));
IkReal x148=((px)*(r00));
IkReal x149=((py)*(r02)*(sj0));
IkReal x150=((cj0)*(px)*(r02));
IkReal x151=((r02)*(x126));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x140)+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(x146));
evalcond[3]=((((sj1)*(x138)))+(((IkReal(-1.00000000000000))*(cj1)*(x132)))+(((sj1)*(x129))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x132)))+(((x129)*(x130)))+(((x130)*(x138)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x148)))+(((r02)*(x145))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj1)*(x132)))+(((IkReal(-1.00000000000000))*(x138)*(x139)))+(((IkReal(-1.00000000000000))*(x129)*(x139))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x134)*(x138)))+(((x138)*(x145)))+(x150)+(x149)+(((x129)*(x145)))+(((IkReal(-1.00000000000000))*(r02)*(x130)))+(((IkReal(-1.00000000000000))*(x129)*(x134))));
evalcond[7]=((((cj1)*(x133)*(x150)))+(((IkReal(-1.00000000000000))*(pp)*(x129)*(x139)))+(((IkReal(-1.00000000000000))*(pp)*(x138)*(x139)))+(((cj1)*(x133)*(x149)))+(((x138)*(x142)))+(((x141)*(x151)))+(((x128)*(x138)*(x144)))+(((x129)*(x142)))+(((py)*(r00)*(x137)*(x144)))+(((IkReal(-1.00000000000000))*(r02)*(x135)))+(((IkReal(-0.380000000000000))*(x147)))+(((IkReal(-0.380000000000000))*(x148)))+(((sj1)*(x133)*(x148)))+(((x127)*(x129)*(x144)))+(((r02)*(x143)))+(((r01)*(x133)*(x136)))+(((IkReal(-1.00000000000000))*(x131)*(x132)))+(((px)*(r01)*(x140)*(x144))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj1)*(pp)*(x132)))+(((IkReal(-2.00000000000000))*(px)*(x136)*(x146)))+(((IkReal(-1.00000000000000))*(x135)*(x138)))+(((cj1)*(x133)*(x148)))+(((cj1)*(x133)*(x147)))+(((IkReal(0.380000000000000))*(x149)))+(((IkReal(0.380000000000000))*(x150)))+(((x129)*(x131)))+(((x144)*(x151)))+(((IkReal(-1.00000000000000))*(sj1)*(x133)*(x150)))+(((IkReal(-1.00000000000000))*(r02)*(x142)))+(((IkReal(-1.00000000000000))*(x127)*(x129)*(x141)))+(((x138)*(x143)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x133)*(x136)))+(((x129)*(x143)))+(((x131)*(x138)))+(((IkReal(-2.00000000000000))*(r00)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(x129)*(x135)))+(((IkReal(-1.00000000000000))*(x128)*(x138)*(x141))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x152=((IkReal(4.51422217576005))*(cj1));
cj3array[0]=((IkReal(-0.889881964969636))+(((IkReal(-4.51422217576005))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x152)))+(((IkReal(11.8795320414738))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x152))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x153=((px)*(sj0));
IkReal x154=((IkReal(2.00000000000000))*(py));
IkReal x155=((cj0)*(r01));
IkReal x156=((pz)*(r02));
IkReal x157=((r00)*(sj0));
IkReal x158=((IkReal(0.380000000000000))*(cj1));
IkReal x159=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x160=((IkReal(0.380000000000000))*(pz)*(sj1));
evalcond[0]=((IkReal(0.111008840000000))+(((IkReal(-0.0361000000000000))*(x157)))+(((x157)*(x160)))+(((cj0)*(py)*(x159)))+(((IkReal(-1.00000000000000))*(cj0)*(x154)*(x156)))+(((IkReal(-1.00000000000000))*(x153)*(x159)))+(((r01)*(x153)*(x154)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x153)))+(((IkReal(-1.00000000000000))*(py)*(x154)*(x155)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x154)))+(((IkReal(2.00000000000000))*(x153)*(x156)))+(((py)*(r00)*(x158)))+(((IkReal(-1.00000000000000))*(pp)*(x157)))+(((IkReal(0.0841784000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(x155)*(x160)))+(((pp)*(x155)))+(((IkReal(0.0361000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x161=((IkReal(1892500.00000000))*(cj3));
IkReal x162=((cj1)*(px));
IkReal x163=((IkReal(868750.000000000))*(r02));
IkReal x164=((pz)*(sj1));
IkReal x165=((IkReal(1892500.00000000))*(sj3));
IkReal x166=((IkReal(868750.000000000))*(py));
IkReal x167=((r00)*(sj1));
IkReal x168=((cj1)*(sj0));
IkReal x169=((pz)*(r00));
IkReal x170=((r02)*(sj0));
IkReal x171=((px)*(r01)*(sj1));
IkReal x172=((cj0)*(cj1)*(py));
IkReal x173=((cj0)*(cj1)*(pz)*(r01));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(py)*(x165)*(x168)))+(((py)*(x161)*(x167)))+(((x161)*(x173)))+(((IkReal(-868750.000000000))*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x161)*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x163)*(x172)))+(((IkReal(-1.00000000000000))*(x161)*(x171)))+(((IkReal(-868750.000000000))*(x171)))+(((x166)*(x167)))+(((sj0)*(x162)*(x163)))+(((IkReal(868750.000000000))*(x173)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x161)*(x172)))+(((IkReal(-1.00000000000000))*(cj0)*(x162)*(x165)))+(((x161)*(x162)*(x170)))+(((IkReal(-1.00000000000000))*(x164)*(x165))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(py)*(x165)*(x167)))+(((IkReal(-1.00000000000000))*(cj0)*(x161)*(x162)))+(((x165)*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(py)*(x161)*(x168)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-868750.000000000))*(x164)))+(((x165)*(x171)))+(((IkReal(-1.00000000000000))*(x162)*(x165)*(x170)))+(((r02)*(x165)*(x172)))+(((IkReal(-868750.000000000))*(cj0)*(x162)))+(((IkReal(-1.00000000000000))*(x165)*(x173))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(py)*(x165)*(x168)))+(((py)*(x161)*(x167)))+(((x161)*(x173)))+(((IkReal(-868750.000000000))*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x161)*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(x163)*(x172)))+(((IkReal(-1.00000000000000))*(x161)*(x171)))+(((IkReal(-868750.000000000))*(x171)))+(((x166)*(x167)))+(((sj0)*(x162)*(x163)))+(((IkReal(868750.000000000))*(x173)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x161)*(x172)))+(((IkReal(-1.00000000000000))*(cj0)*(x162)*(x165)))+(((x161)*(x162)*(x170)))+(((IkReal(-1.00000000000000))*(x164)*(x165)))))), ((gconst10)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x166)*(x168)))+(((IkReal(-1.00000000000000))*(py)*(x165)*(x167)))+(((IkReal(-1.00000000000000))*(cj0)*(x161)*(x162)))+(((x165)*(x168)*(x169)))+(((IkReal(-1.00000000000000))*(py)*(x161)*(x168)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x161)*(x164)))+(((IkReal(-868750.000000000))*(x164)))+(((x165)*(x171)))+(((IkReal(-1.00000000000000))*(x162)*(x165)*(x170)))+(((r02)*(x165)*(x172)))+(((IkReal(-868750.000000000))*(cj0)*(x162)))+(((IkReal(-1.00000000000000))*(x165)*(x173)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x174=IKsin(j2);
IkReal x175=IKcos(j2);
IkReal x176=((px)*(sj1));
IkReal x177=((py)*(sj1));
IkReal x178=((IkReal(1.00000000000000))*(r00));
IkReal x179=((cj1)*(sj0));
IkReal x180=((IkReal(1.00000000000000))*(px));
IkReal x181=((IkReal(1.00000000000000))*(pz));
IkReal x182=((cj0)*(r01));
IkReal x183=((pz)*(sj1));
IkReal x184=((cj0)*(cj1));
IkReal x185=((IkReal(0.139000000000000))*(x174));
IkReal x186=((IkReal(0.139000000000000))*(x175));
IkReal x187=((IkReal(0.302800000000000))*(x174));
IkReal x188=((IkReal(0.302800000000000))*(x175));
IkReal x189=((sj3)*(x188));
IkReal x190=((cj3)*(x187));
IkReal x191=((cj3)*(x188));
IkReal x192=((sj3)*(x187));
IkReal x193=((x190)+(x185));
IkReal x194=((x192)+(x191)+(x186));
evalcond[0]=((((cj0)*(x176)))+(((sj0)*(x177)))+(((IkReal(-1.00000000000000))*(x189)))+(x193)+(((IkReal(-1.00000000000000))*(cj1)*(x181))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x179)))+(((IkReal(-1.00000000000000))*(x180)*(x184)))+(x194)+(((IkReal(-1.00000000000000))*(sj1)*(x181))));
evalcond[2]=((((pz)*(r00)*(x179)))+(((r01)*(x176)))+(((IkReal(-1.00000000000000))*(cj1)*(x181)*(x182)))+(((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(r02)*(x179)*(x180)))+(((IkReal(-1.00000000000000))*(x177)*(x178)))+(x189)+(((py)*(r02)*(x184))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x178)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x177)))+(((r02)*(sj0)*(x176)))+(((IkReal(-0.190000000000000))*(x182)))+(x194)+(((IkReal(-1.00000000000000))*(sj0)*(x178)*(x183)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((x182)*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x195=((cj1)*(pz));
IkReal x196=((IkReal(1892500.00000000))*(sj1));
IkReal x197=((py)*(sj0));
IkReal x198=((IkReal(1892500.00000000))*(sj3));
IkReal x199=((IkReal(868750.000000000))*(sj1));
IkReal x200=((IkReal(1892500.00000000))*(cj3));
IkReal x201=((cj0)*(px));
IkReal x202=((cj1)*(x201));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(x195)*(x200)))+(((cj3)*(x196)*(x201)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x196)))+(((cj3)*(x196)*(x197)))+(((IkReal(-1.00000000000000))*(x198)*(x202)))+(((IkReal(-868750.000000000))*(x195)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)*(x198)))+(((x197)*(x199)))+(((x199)*(x201))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(sj3)*(x196)*(x201)))+(((IkReal(-1.00000000000000))*(x200)*(x202)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)*(x200)))+(((IkReal(-1.00000000000000))*(pz)*(x199)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x196)))+(((x195)*(x198)))+(((IkReal(-868750.000000000))*(cj1)*(x197)))+(((IkReal(-1.00000000000000))*(sj3)*(x196)*(x197)))+(((IkReal(-868750.000000000))*(x202))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(x195)*(x200)))+(((cj3)*(x196)*(x201)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x196)))+(((cj3)*(x196)*(x197)))+(((IkReal(-1.00000000000000))*(x198)*(x202)))+(((IkReal(-868750.000000000))*(x195)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)*(x198)))+(((x197)*(x199)))+(((x199)*(x201)))))), ((gconst9)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(sj3)*(x196)*(x201)))+(((IkReal(-1.00000000000000))*(x200)*(x202)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)*(x200)))+(((IkReal(-1.00000000000000))*(pz)*(x199)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x196)))+(((x195)*(x198)))+(((IkReal(-868750.000000000))*(cj1)*(x197)))+(((IkReal(-1.00000000000000))*(sj3)*(x196)*(x197)))+(((IkReal(-868750.000000000))*(x202)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x203=IKsin(j2);
IkReal x204=IKcos(j2);
IkReal x205=((px)*(sj1));
IkReal x206=((py)*(sj1));
IkReal x207=((IkReal(1.00000000000000))*(r00));
IkReal x208=((cj1)*(sj0));
IkReal x209=((IkReal(1.00000000000000))*(px));
IkReal x210=((IkReal(1.00000000000000))*(pz));
IkReal x211=((cj0)*(r01));
IkReal x212=((pz)*(sj1));
IkReal x213=((cj0)*(cj1));
IkReal x214=((IkReal(0.139000000000000))*(x203));
IkReal x215=((IkReal(0.139000000000000))*(x204));
IkReal x216=((IkReal(0.302800000000000))*(x203));
IkReal x217=((IkReal(0.302800000000000))*(x204));
IkReal x218=((sj3)*(x217));
IkReal x219=((cj3)*(x216));
IkReal x220=((cj3)*(x217));
IkReal x221=((sj3)*(x216));
IkReal x222=((x214)+(x219));
IkReal x223=((x215)+(x221)+(x220));
evalcond[0]=((((sj0)*(x206)))+(((IkReal(-1.00000000000000))*(cj1)*(x210)))+(x222)+(((cj0)*(x205)))+(((IkReal(-1.00000000000000))*(x218))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x210)))+(x223)+(((IkReal(-1.00000000000000))*(x209)*(x213)))+(((IkReal(-1.00000000000000))*(py)*(x208))));
evalcond[2]=((((pz)*(r00)*(x208)))+(((py)*(r02)*(x213)))+(((IkReal(-1.00000000000000))*(cj1)*(x210)*(x211)))+(((IkReal(-1.00000000000000))*(r02)*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))+(((r01)*(x205)))+(x218)+(((IkReal(-1.00000000000000))*(x222))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x211)))+(((IkReal(-1.00000000000000))*(sj0)*(x207)*(x212)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x206)))+(((x211)*(x212)))+(x223)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x207)))+(((r02)*(sj0)*(x205)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x224=((IkReal(4.51422217576005))*(cj1));
IkReal x225=((IkReal(190.000000000000))*(cj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x225)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x225)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.889881964969636))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x224)))+(((IkReal(-4.51422217576005))*(pz)*(sj1)))+(((IkReal(11.8795320414738))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x224))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x225)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x225)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.889881964969636))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x224)))+(((IkReal(-4.51422217576005))*(pz)*(sj1)))+(((IkReal(11.8795320414738))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x224)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x225)))+(((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x225)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r02)*(sj1)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.889881964969636))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x224)))+(((IkReal(-4.51422217576005))*(pz)*(sj1)))+(((IkReal(11.8795320414738))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x224)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x226=IKcos(j3);
IkReal x227=((r01)*(sj0));
IkReal x228=((IkReal(0.190000000000000))*(cj1));
IkReal x229=((cj0)*(py));
IkReal x230=((px)*(sj0));
IkReal x231=((py)*(sj0));
IkReal x232=((r00)*(sj0));
IkReal x233=((cj0)*(r01));
IkReal x234=((IkReal(1.00000000000000))*(pz));
IkReal x235=((IkReal(1.00000000000000))*(pp));
IkReal x236=((IkReal(0.380000000000000))*(cj1));
IkReal x237=((cj0)*(r00));
IkReal x238=((IkReal(0.190000000000000))*(sj1));
IkReal x239=((IkReal(0.139000000000000))*(cj4));
IkReal x240=((cj0)*(px));
IkReal x241=((IkReal(2.00000000000000))*(px)*(py));
IkReal x242=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x243=((IkReal(0.0841784000000000))*(x226));
IkReal x244=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x245=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0749088400000000))+(((x236)*(x240)))+(((IkReal(-1.00000000000000))*(x235)))+(x243)+(x244)+(((x231)*(x236))));
evalcond[1]=((((x227)*(x228)))+(((r02)*(x238)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x228)*(x237)))+(((IkReal(-1.00000000000000))*(r02)*(x234)))+(((x239)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((x237)*(x238)))+(((r02)*(x231)))+(((IkReal(-1.00000000000000))*(x227)*(x234)))+(((IkReal(-1.00000000000000))*(r02)*(x228)))+(((r02)*(x240)))+(((IkReal(-1.00000000000000))*(x226)*(x239)))+(((x227)*(x238)))+(((IkReal(-1.00000000000000))*(x234)*(x237)))+(((IkReal(-0.302800000000000))*(cj4))));
evalcond[3]=((((py)*(r00)*(x236)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x230)))+(((IkReal(-0.111008840000000))*(sj4)))+(((pp)*(x233)))+(((x230)*(x245)))+(((IkReal(-2.00000000000000))*(py)*(r01)*(x229)))+(((IkReal(-1.00000000000000))*(x229)*(x245)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x229)))+(((IkReal(-0.0361000000000000))*(x232)))+(((IkReal(0.0361000000000000))*(x233)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x236)))+(((IkReal(-1.00000000000000))*(sj4)*(x243)))+(((IkReal(-1.00000000000000))*(x230)*(x242)))+(((x227)*(x241)))+(((x229)*(x242)))+(((IkReal(-1.00000000000000))*(x233)*(x244)))+(((x232)*(x244)))+(((IkReal(-1.00000000000000))*(x232)*(x235))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x246=((IkReal(757.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(347.500000000000))*(cj3)*(cj4)))+(((x246)*((cj3)*(cj3))))+(((x246)*((sj3)*(sj3))))));
IkReal x247=((IkReal(2.17841726618705))*(cj4));
dummyeval[0]=((((x247)*((cj3)*(cj3))))+(((cj3)*(cj4)))+(((x247)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x248=((IkReal(0.0841784000000000))*(cj3));
IkReal x249=(py)*(py);
IkReal x250=(px)*(px);
IkReal x251=(pz)*(pz);
IkReal x252=((r01)*(sj0));
IkReal x253=((IkReal(2.00000000000000))*(py));
IkReal x254=((IkReal(0.190000000000000))*(cj1));
IkReal x255=((cj0)*(py));
IkReal x256=((px)*(sj0));
IkReal x257=((r02)*(sj0));
IkReal x258=((pp)*(sj1));
IkReal x259=((cj1)*(pz));
IkReal x260=((cj0)*(px));
IkReal x261=((IkReal(2.00000000000000))*(r02));
IkReal x262=((r00)*(sj0));
IkReal x263=((cj0)*(pp));
IkReal x264=((IkReal(1.00000000000000))*(r02));
IkReal x265=((r00)*(sj1));
IkReal x266=((r01)*(sj1));
IkReal x267=((IkReal(0.380000000000000))*(cj1));
IkReal x268=((IkReal(0.380000000000000))*(pz));
IkReal x269=((IkReal(1.00000000000000))*(pp));
IkReal x270=((pz)*(sj1));
IkReal x271=((IkReal(0.0361000000000000))*(sj1));
IkReal x272=((cj0)*(r00));
IkReal x273=((IkReal(0.380000000000000))*(py));
IkReal x274=((IkReal(0.190000000000000))*(sj1));
IkReal x275=((cj0)*(r01));
IkReal x276=((IkReal(0.0361000000000000))*(cj1));
IkReal x277=((IkReal(1.00000000000000))*(pz));
IkReal x278=((IkReal(2.00000000000000))*(px));
IkReal x279=((px)*(r00));
IkReal x280=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x281=((IkReal(2.00000000000000))*(x250));
IkReal x282=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x283=((IkReal(2.00000000000000))*(x249));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x255)+(((IkReal(-1.00000000000000))*(x256))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x262)))+(x275));
evalcond[3]=((IkReal(0.0749088400000000))+(((x260)*(x267)))+(((py)*(sj0)*(x267)))+(x248)+(((IkReal(-1.00000000000000))*(x269)))+(((sj1)*(x268))));
evalcond[4]=((((cj0)*(x265)))+(((IkReal(-1.00000000000000))*(cj1)*(x264)))+(((sj1)*(x252))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x279)))+(((r02)*(x274)))+(((x254)*(x272)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x252)*(x254)))+(((IkReal(-1.00000000000000))*(pz)*(x264))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x252)))+(((IkReal(-1.00000000000000))*(sj1)*(x264)))+(((IkReal(-1.00000000000000))*(cj1)*(x272))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(r02)*(x254)))+(((r02)*(x260)))+(((py)*(x257)))+(((IkReal(0.190000000000000))*(cj0)*(x265)))+(((x252)*(x274)))+(((IkReal(-1.00000000000000))*(x252)*(x277))));
evalcond[8]=((IkReal(-0.111008840000000))+(((IkReal(-1.00000000000000))*(x262)*(x269)))+(((IkReal(-1.00000000000000))*(cj0)*(x266)*(x268)))+(((py)*(r00)*(x267)))+(((sj1)*(x262)*(x268)))+(((IkReal(-0.0361000000000000))*(x262)))+(((x262)*(x281)))+(((pz)*(x256)*(x261)))+(((IkReal(0.0361000000000000))*(x275)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x267)))+(((x255)*(x280)))+(((IkReal(-1.00000000000000))*(r00)*(x253)*(x260)))+(((IkReal(-1.00000000000000))*(x248)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(r02)*(x253)))+(((r01)*(x263)))+(((IkReal(-1.00000000000000))*(x256)*(x280)))+(((IkReal(-1.00000000000000))*(x275)*(x283)))+(((px)*(x252)*(x253))));
evalcond[9]=((((x272)*(x276)))+(((x259)*(x260)*(x261)))+(((pz)*(x253)*(x266)))+(((cj1)*(r00)*(x253)*(x256)))+(((cj1)*(x272)*(x281)))+(((IkReal(-1.00000000000000))*(x258)*(x264)))+(((r02)*(x271)))+(((IkReal(-1.00000000000000))*(x263)*(x282)))+(((IkReal(-0.380000000000000))*(x279)))+(((sj1)*(x251)*(x261)))+(((cj1)*(x252)*(x283)))+(((x252)*(x276)))+(((IkReal(-1.00000000000000))*(r01)*(x273)))+(((IkReal(-1.00000000000000))*(cj1)*(x252)*(x269)))+(((cj1)*(r01)*(x253)*(x260)))+(((IkReal(-1.00000000000000))*(r02)*(x268)))+(((x253)*(x257)*(x259)))+(((pz)*(x265)*(x278))));
evalcond[10]=((((IkReal(0.0361000000000000))*(cj0)*(x265)))+(((IkReal(-1.00000000000000))*(x253)*(x257)*(x270)))+(((IkReal(-1.00000000000000))*(cj0)*(x265)*(x281)))+(((IkReal(-1.00000000000000))*(x260)*(x261)*(x270)))+(((IkReal(-1.00000000000000))*(x253)*(x256)*(x265)))+(((IkReal(-1.00000000000000))*(x253)*(x260)*(x266)))+(((x258)*(x272)))+(((cj1)*(x251)*(x261)))+(((r01)*(x253)*(x259)))+(((x252)*(x271)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x264)))+(((IkReal(-1.00000000000000))*(sj1)*(x252)*(x283)))+(((IkReal(-1.00000000000000))*(r02)*(x276)))+(((IkReal(-1.00000000000000))*(x268)*(x272)))+(((x252)*(x258)))+(((x257)*(x273)))+(((IkReal(-1.00000000000000))*(x252)*(x268)))+(((IkReal(0.380000000000000))*(r02)*(x260)))+(((r00)*(x259)*(x278))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x284=((IkReal(1892500.00000000))*(cj3));
IkReal x285=((cj1)*(px));
IkReal x286=((IkReal(868750.000000000))*(r02));
IkReal x287=((pz)*(sj1));
IkReal x288=((IkReal(1892500.00000000))*(sj3));
IkReal x289=((IkReal(868750.000000000))*(py));
IkReal x290=((r00)*(sj1));
IkReal x291=((cj1)*(sj0));
IkReal x292=((pz)*(r00));
IkReal x293=((r02)*(sj0));
IkReal x294=((IkReal(868750.000000000))*(cj0));
IkReal x295=((px)*(r01)*(sj1));
IkReal x296=((cj0)*(cj1)*(py));
IkReal x297=((cj1)*(pz)*(r01));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj0)*(x285)*(x288)))+(((IkReal(-1.00000000000000))*(x287)*(x288)))+(((IkReal(-1.00000000000000))*(x289)*(x290)))+(((r02)*(x284)*(x296)))+(((IkReal(868750.000000000))*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x284)*(x290)))+(((x284)*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x288)*(x291)))+(((x284)*(x291)*(x292)))+(((x286)*(x296)))+(((IkReal(-1.00000000000000))*(sj0)*(x285)*(x286)))+(((IkReal(-1.00000000000000))*(cj0)*(x284)*(x297)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x284)*(x285)*(x293)))+(((IkReal(868750.000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x294)*(x297))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(cj0)*(x284)*(x285)))+(((IkReal(-1.00000000000000))*(x288)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x285)*(x294)))+(((IkReal(-868750.000000000))*(x287)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x284)*(x291)))+(((cj0)*(x288)*(x297)))+(((IkReal(-1.00000000000000))*(r02)*(x288)*(x296)))+(((IkReal(-1.00000000000000))*(x284)*(x287)))+(((x285)*(x288)*(x293)))+(((IkReal(-1.00000000000000))*(x288)*(x295)))+(((py)*(x288)*(x290))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj0)*(x285)*(x288)))+(((IkReal(-1.00000000000000))*(x287)*(x288)))+(((IkReal(-1.00000000000000))*(x289)*(x290)))+(((r02)*(x284)*(x296)))+(((IkReal(868750.000000000))*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x284)*(x290)))+(((x284)*(x295)))+(((IkReal(-1.00000000000000))*(py)*(x288)*(x291)))+(((x284)*(x291)*(x292)))+(((x286)*(x296)))+(((IkReal(-1.00000000000000))*(sj0)*(x285)*(x286)))+(((IkReal(-1.00000000000000))*(cj0)*(x284)*(x297)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x284)*(x285)*(x293)))+(((IkReal(868750.000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x294)*(x297)))))), ((gconst4)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(cj0)*(x284)*(x285)))+(((IkReal(-1.00000000000000))*(x288)*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x285)*(x294)))+(((IkReal(-868750.000000000))*(x287)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x284)*(x291)))+(((cj0)*(x288)*(x297)))+(((IkReal(-1.00000000000000))*(r02)*(x288)*(x296)))+(((IkReal(-1.00000000000000))*(x284)*(x287)))+(((x285)*(x288)*(x293)))+(((IkReal(-1.00000000000000))*(x288)*(x295)))+(((py)*(x288)*(x290)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x298=IKsin(j2);
IkReal x299=IKcos(j2);
IkReal x300=((px)*(sj1));
IkReal x301=((py)*(sj1));
IkReal x302=((IkReal(1.00000000000000))*(r00));
IkReal x303=((cj1)*(sj0));
IkReal x304=((IkReal(1.00000000000000))*(px));
IkReal x305=((IkReal(1.00000000000000))*(pz));
IkReal x306=((cj0)*(r01));
IkReal x307=((pz)*(sj1));
IkReal x308=((cj0)*(cj1));
IkReal x309=((IkReal(0.139000000000000))*(x298));
IkReal x310=((IkReal(0.139000000000000))*(x299));
IkReal x311=((IkReal(0.302800000000000))*(x298));
IkReal x312=((IkReal(0.302800000000000))*(x299));
IkReal x313=((cj3)*(x311));
IkReal x314=((sj3)*(x312));
IkReal x315=((cj3)*(x312));
IkReal x316=((sj3)*(x311));
IkReal x317=((x309)+(x313));
IkReal x318=((x315)+(x316)+(x310));
evalcond[0]=((x317)+(((cj0)*(x300)))+(((IkReal(-1.00000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(cj1)*(x305)))+(((sj0)*(x301))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x305)))+(((IkReal(-1.00000000000000))*(py)*(x303)))+(x318)+(((IkReal(-1.00000000000000))*(x304)*(x308))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x305)*(x306)))+(((IkReal(-1.00000000000000))*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(r02)*(x303)*(x304)))+(x317)+(((IkReal(-1.00000000000000))*(x314)))+(((py)*(r02)*(x308)))+(((r01)*(x300)))+(((pz)*(r00)*(x303))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(sj0)*(x302)*(x307)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x301)))+(((IkReal(-1.00000000000000))*(x318)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x300)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x302)))+(((x306)*(x307))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x319=((cj1)*(pz));
IkReal x320=((IkReal(1892500.00000000))*(sj1));
IkReal x321=((py)*(sj0));
IkReal x322=((IkReal(1892500.00000000))*(sj3));
IkReal x323=((IkReal(868750.000000000))*(sj1));
IkReal x324=((IkReal(1892500.00000000))*(cj3));
IkReal x325=((cj0)*(px));
IkReal x326=((cj1)*(x325));
if( IKabs(((gconst3)*(((((IkReal(-868750.000000000))*(x319)))+(((x323)*(x325)))+(((cj3)*(x320)*(x321)))+(((cj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x320)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((IkReal(-1.00000000000000))*(cj1)*(x321)*(x322)))+(((IkReal(359575.000000000))*(sj3)))+(((x321)*(x323))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(165062.500000000))+(((IkReal(-868750.000000000))*(cj1)*(x321)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x320)))+(((IkReal(-1.00000000000000))*(cj1)*(x321)*(x324)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(pz)*(x323)))+(((IkReal(-1.00000000000000))*(x324)*(x326)))+(((IkReal(-868750.000000000))*(x326)))+(((x319)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-868750.000000000))*(x319)))+(((x323)*(x325)))+(((cj3)*(x320)*(x321)))+(((cj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x320)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((IkReal(-1.00000000000000))*(cj1)*(x321)*(x322)))+(((IkReal(359575.000000000))*(sj3)))+(((x321)*(x323)))))), ((gconst3)*(((IkReal(165062.500000000))+(((IkReal(-868750.000000000))*(cj1)*(x321)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x320)))+(((IkReal(-1.00000000000000))*(cj1)*(x321)*(x324)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(sj3)*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(pz)*(x323)))+(((IkReal(-1.00000000000000))*(x324)*(x326)))+(((IkReal(-868750.000000000))*(x326)))+(((x319)*(x322)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x327=IKsin(j2);
IkReal x328=IKcos(j2);
IkReal x329=((px)*(sj1));
IkReal x330=((py)*(sj1));
IkReal x331=((IkReal(1.00000000000000))*(r00));
IkReal x332=((cj1)*(sj0));
IkReal x333=((IkReal(1.00000000000000))*(px));
IkReal x334=((IkReal(1.00000000000000))*(pz));
IkReal x335=((cj0)*(r01));
IkReal x336=((pz)*(sj1));
IkReal x337=((cj0)*(cj1));
IkReal x338=((IkReal(0.139000000000000))*(x327));
IkReal x339=((IkReal(0.139000000000000))*(x328));
IkReal x340=((IkReal(0.302800000000000))*(x327));
IkReal x341=((IkReal(0.302800000000000))*(x328));
IkReal x342=((cj3)*(x340));
IkReal x343=((sj3)*(x341));
IkReal x344=((cj3)*(x341));
IkReal x345=((sj3)*(x340));
IkReal x346=((x338)+(x342));
IkReal x347=((x339)+(x344)+(x345));
evalcond[0]=((x346)+(((cj0)*(x329)))+(((IkReal(-1.00000000000000))*(cj1)*(x334)))+(((IkReal(-1.00000000000000))*(x343)))+(((sj0)*(x330))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x333)*(x337)))+(((IkReal(-1.00000000000000))*(py)*(x332)))+(x347)+(((IkReal(-1.00000000000000))*(sj1)*(x334))));
evalcond[2]=((((pz)*(r00)*(x332)))+(((IkReal(-1.00000000000000))*(cj1)*(x334)*(x335)))+(((r01)*(x329)))+(((IkReal(-1.00000000000000))*(r02)*(x332)*(x333)))+(x346)+(((IkReal(-1.00000000000000))*(x330)*(x331)))+(((py)*(r02)*(x337)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[3]=((((x335)*(x336)))+(((r02)*(sj0)*(x329)))+(((IkReal(-1.00000000000000))*(sj0)*(x331)*(x336)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x331)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x330)))+(((IkReal(-1.00000000000000))*(x347)))+(((cj1)*(px)*(r01)))+(((IkReal(-0.190000000000000))*(x335))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x348=((IkReal(0.0841784000000000))*(cj3));
IkReal x349=(py)*(py);
IkReal x350=(px)*(px);
IkReal x351=(pz)*(pz);
IkReal x352=((r01)*(sj0));
IkReal x353=((IkReal(2.00000000000000))*(py));
IkReal x354=((IkReal(0.190000000000000))*(cj1));
IkReal x355=((cj0)*(py));
IkReal x356=((px)*(sj0));
IkReal x357=((r02)*(sj0));
IkReal x358=((pp)*(sj1));
IkReal x359=((cj1)*(pz));
IkReal x360=((cj0)*(px));
IkReal x361=((IkReal(2.00000000000000))*(r02));
IkReal x362=((r00)*(sj0));
IkReal x363=((cj0)*(pp));
IkReal x364=((IkReal(1.00000000000000))*(r02));
IkReal x365=((r00)*(sj1));
IkReal x366=((r01)*(sj1));
IkReal x367=((IkReal(0.380000000000000))*(cj1));
IkReal x368=((IkReal(0.380000000000000))*(pz));
IkReal x369=((IkReal(1.00000000000000))*(pp));
IkReal x370=((pz)*(sj1));
IkReal x371=((IkReal(0.0361000000000000))*(sj1));
IkReal x372=((cj0)*(r00));
IkReal x373=((IkReal(0.380000000000000))*(py));
IkReal x374=((IkReal(0.190000000000000))*(sj1));
IkReal x375=((cj0)*(r01));
IkReal x376=((IkReal(0.0361000000000000))*(cj1));
IkReal x377=((IkReal(1.00000000000000))*(pz));
IkReal x378=((IkReal(2.00000000000000))*(px));
IkReal x379=((px)*(r00));
IkReal x380=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x381=((IkReal(2.00000000000000))*(x350));
IkReal x382=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x383=((IkReal(2.00000000000000))*(x349));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x356)))+(x355));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x362)))+(x375));
evalcond[3]=((IkReal(0.0749088400000000))+(((IkReal(-1.00000000000000))*(x369)))+(((sj1)*(x368)))+(x348)+(((py)*(sj0)*(x367)))+(((x360)*(x367))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x364)))+(((sj1)*(x352)))+(((cj0)*(x365))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x379)))+(((r02)*(x374)))+(((x352)*(x354)))+(((x354)*(x372)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(pz)*(x364))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x352)))+(((IkReal(-1.00000000000000))*(sj1)*(x364)))+(((IkReal(-1.00000000000000))*(cj1)*(x372))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x352)*(x377)))+(((IkReal(-1.00000000000000))*(x372)*(x377)))+(((py)*(x357)))+(((x352)*(x374)))+(((IkReal(-1.00000000000000))*(r02)*(x354)))+(((IkReal(0.190000000000000))*(cj0)*(x365)))+(((r02)*(x360))));
evalcond[8]=((IkReal(0.111008840000000))+(((x355)*(x380)))+(((IkReal(-1.00000000000000))*(x362)*(x369)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x367)))+(((r01)*(x363)))+(((IkReal(-1.00000000000000))*(x356)*(x380)))+(((IkReal(-1.00000000000000))*(x375)*(x383)))+(((x362)*(x381)))+(((IkReal(-1.00000000000000))*(r00)*(x353)*(x360)))+(((IkReal(-1.00000000000000))*(cj0)*(x366)*(x368)))+(((pz)*(x356)*(x361)))+(x348)+(((IkReal(-0.0361000000000000))*(x362)))+(((py)*(r00)*(x367)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(r02)*(x353)))+(((px)*(x352)*(x353)))+(((sj1)*(x362)*(x368)))+(((IkReal(0.0361000000000000))*(x375))));
evalcond[9]=((((r02)*(x371)))+(((cj1)*(x352)*(x383)))+(((pz)*(x365)*(x378)))+(((pz)*(x353)*(x366)))+(((IkReal(-1.00000000000000))*(r02)*(x368)))+(((IkReal(-1.00000000000000))*(r01)*(x373)))+(((x353)*(x357)*(x359)))+(((IkReal(-1.00000000000000))*(x358)*(x364)))+(((sj1)*(x351)*(x361)))+(((x372)*(x376)))+(((x352)*(x376)))+(((IkReal(-0.380000000000000))*(x379)))+(((cj1)*(x372)*(x381)))+(((IkReal(-1.00000000000000))*(x363)*(x382)))+(((IkReal(-1.00000000000000))*(cj1)*(x352)*(x369)))+(((x359)*(x360)*(x361)))+(((cj1)*(r00)*(x353)*(x356)))+(((cj1)*(r01)*(x353)*(x360))));
evalcond[10]=((((cj1)*(x351)*(x361)))+(((IkReal(-1.00000000000000))*(x368)*(x372)))+(((x358)*(x372)))+(((IkReal(-1.00000000000000))*(x353)*(x356)*(x365)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x364)))+(((IkReal(-1.00000000000000))*(x353)*(x360)*(x366)))+(((IkReal(-1.00000000000000))*(r02)*(x376)))+(((IkReal(-1.00000000000000))*(x352)*(x368)))+(((x352)*(x358)))+(((IkReal(-1.00000000000000))*(cj0)*(x365)*(x381)))+(((r00)*(x359)*(x378)))+(((r01)*(x353)*(x359)))+(((x352)*(x371)))+(((IkReal(0.0361000000000000))*(cj0)*(x365)))+(((IkReal(0.380000000000000))*(r02)*(x360)))+(((IkReal(-1.00000000000000))*(sj1)*(x352)*(x383)))+(((IkReal(-1.00000000000000))*(x360)*(x361)*(x370)))+(((IkReal(-1.00000000000000))*(x353)*(x357)*(x370)))+(((x357)*(x373))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x384=((IkReal(1892500.00000000))*(cj3));
IkReal x385=((cj1)*(px));
IkReal x386=((IkReal(868750.000000000))*(r02));
IkReal x387=((pz)*(sj1));
IkReal x388=((IkReal(1892500.00000000))*(sj3));
IkReal x389=((IkReal(868750.000000000))*(py));
IkReal x390=((r00)*(sj1));
IkReal x391=((cj1)*(sj0));
IkReal x392=((pz)*(r00));
IkReal x393=((r02)*(sj0));
IkReal x394=((px)*(r01)*(sj1));
IkReal x395=((cj0)*(cj1)*(py));
IkReal x396=((cj0)*(cj1)*(pz)*(r01));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x384)*(x394)))+(((IkReal(-1.00000000000000))*(cj0)*(x385)*(x388)))+(((IkReal(-868750.000000000))*(x394)))+(((IkReal(-1.00000000000000))*(x386)*(x395)))+(((IkReal(-1.00000000000000))*(r02)*(x384)*(x395)))+(((IkReal(-1.00000000000000))*(x384)*(x391)*(x392)))+(((py)*(x384)*(x390)))+(((IkReal(-1.00000000000000))*(x387)*(x388)))+(((IkReal(868750.000000000))*(x396)))+(((sj0)*(x385)*(x386)))+(((IkReal(-1.00000000000000))*(py)*(x388)*(x391)))+(((IkReal(-868750.000000000))*(x391)*(x392)))+(((IkReal(359575.000000000))*(sj3)))+(((x384)*(x396)))+(((x389)*(x390)))+(((x384)*(x385)*(x393))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(165062.500000000))+(((x388)*(x391)*(x392)))+(((IkReal(-1.00000000000000))*(x389)*(x391)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x384)*(x387)))+(((IkReal(-1.00000000000000))*(x388)*(x396)))+(((IkReal(-1.00000000000000))*(cj0)*(x384)*(x385)))+(((IkReal(-1.00000000000000))*(py)*(x384)*(x391)))+(((IkReal(-1.00000000000000))*(py)*(x388)*(x390)))+(((IkReal(-868750.000000000))*(x387)))+(((r02)*(x388)*(x395)))+(((IkReal(-868750.000000000))*(cj0)*(x385)))+(((IkReal(-1.00000000000000))*(x385)*(x388)*(x393)))+(((x388)*(x394))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(x384)*(x394)))+(((IkReal(-1.00000000000000))*(cj0)*(x385)*(x388)))+(((IkReal(-868750.000000000))*(x394)))+(((IkReal(-1.00000000000000))*(x386)*(x395)))+(((IkReal(-1.00000000000000))*(r02)*(x384)*(x395)))+(((IkReal(-1.00000000000000))*(x384)*(x391)*(x392)))+(((py)*(x384)*(x390)))+(((IkReal(-1.00000000000000))*(x387)*(x388)))+(((IkReal(868750.000000000))*(x396)))+(((sj0)*(x385)*(x386)))+(((IkReal(-1.00000000000000))*(py)*(x388)*(x391)))+(((IkReal(-868750.000000000))*(x391)*(x392)))+(((IkReal(359575.000000000))*(sj3)))+(((x384)*(x396)))+(((x389)*(x390)))+(((x384)*(x385)*(x393)))))), ((gconst6)*(((IkReal(165062.500000000))+(((x388)*(x391)*(x392)))+(((IkReal(-1.00000000000000))*(x389)*(x391)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x384)*(x387)))+(((IkReal(-1.00000000000000))*(x388)*(x396)))+(((IkReal(-1.00000000000000))*(cj0)*(x384)*(x385)))+(((IkReal(-1.00000000000000))*(py)*(x384)*(x391)))+(((IkReal(-1.00000000000000))*(py)*(x388)*(x390)))+(((IkReal(-868750.000000000))*(x387)))+(((r02)*(x388)*(x395)))+(((IkReal(-868750.000000000))*(cj0)*(x385)))+(((IkReal(-1.00000000000000))*(x385)*(x388)*(x393)))+(((x388)*(x394)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x397=IKsin(j2);
IkReal x398=IKcos(j2);
IkReal x399=((px)*(sj1));
IkReal x400=((py)*(sj1));
IkReal x401=((IkReal(1.00000000000000))*(r00));
IkReal x402=((cj1)*(sj0));
IkReal x403=((IkReal(1.00000000000000))*(px));
IkReal x404=((IkReal(1.00000000000000))*(pz));
IkReal x405=((cj0)*(r01));
IkReal x406=((pz)*(sj1));
IkReal x407=((cj0)*(cj1));
IkReal x408=((IkReal(0.139000000000000))*(x397));
IkReal x409=((IkReal(0.139000000000000))*(x398));
IkReal x410=((IkReal(0.302800000000000))*(x397));
IkReal x411=((IkReal(0.302800000000000))*(x398));
IkReal x412=((sj3)*(x411));
IkReal x413=((cj3)*(x410));
IkReal x414=((cj3)*(x411));
IkReal x415=((sj3)*(x410));
IkReal x416=((x408)+(x413));
IkReal x417=((x409)+(x414)+(x415));
evalcond[0]=((((cj0)*(x399)))+(((IkReal(-1.00000000000000))*(cj1)*(x404)))+(((sj0)*(x400)))+(x416)+(((IkReal(-1.00000000000000))*(x412))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x402)))+(((IkReal(-1.00000000000000))*(x403)*(x407)))+(x417)+(((IkReal(-1.00000000000000))*(sj1)*(x404))));
evalcond[2]=((((py)*(r02)*(x407)))+(((IkReal(-1.00000000000000))*(cj1)*(x404)*(x405)))+(((r01)*(x399)))+(((pz)*(r00)*(x402)))+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(x412)+(((IkReal(-1.00000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(r02)*(x402)*(x403))));
evalcond[3]=((((x405)*(x406)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x400)))+(((IkReal(-1.00000000000000))*(sj0)*(x401)*(x406)))+(x417)+(((IkReal(-0.190000000000000))*(x405)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x401)))+(((r02)*(sj0)*(x399))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x418=((cj1)*(pz));
IkReal x419=((IkReal(1892500.00000000))*(sj1));
IkReal x420=((py)*(sj0));
IkReal x421=((IkReal(1892500.00000000))*(sj3));
IkReal x422=((IkReal(868750.000000000))*(sj1));
IkReal x423=((IkReal(1892500.00000000))*(cj3));
IkReal x424=((cj0)*(px));
IkReal x425=((cj1)*(x424));
if( IKabs(((gconst5)*(((((x420)*(x422)))+(((IkReal(-1.00000000000000))*(x421)*(x425)))+(((IkReal(-868750.000000000))*(x418)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x419)))+(((IkReal(-1.00000000000000))*(x418)*(x423)))+(((cj3)*(x419)*(x420)))+(((cj3)*(x419)*(x424)))+(((x422)*(x424)))+(((IkReal(-1.00000000000000))*(cj1)*(x420)*(x421))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(165062.500000000))+(((IkReal(-868750.000000000))*(x425)))+(((IkReal(-1.00000000000000))*(sj3)*(x419)*(x424)))+(((IkReal(-1.00000000000000))*(sj3)*(x419)*(x420)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x419)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(pz)*(x422)))+(((IkReal(-1.00000000000000))*(cj1)*(x420)*(x423)))+(((IkReal(-868750.000000000))*(cj1)*(x420))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((x420)*(x422)))+(((IkReal(-1.00000000000000))*(x421)*(x425)))+(((IkReal(-868750.000000000))*(x418)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x419)))+(((IkReal(-1.00000000000000))*(x418)*(x423)))+(((cj3)*(x419)*(x420)))+(((cj3)*(x419)*(x424)))+(((x422)*(x424)))+(((IkReal(-1.00000000000000))*(cj1)*(x420)*(x421)))))), ((gconst5)*(((IkReal(165062.500000000))+(((IkReal(-868750.000000000))*(x425)))+(((IkReal(-1.00000000000000))*(sj3)*(x419)*(x424)))+(((IkReal(-1.00000000000000))*(sj3)*(x419)*(x420)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x419)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(pz)*(x422)))+(((IkReal(-1.00000000000000))*(cj1)*(x420)*(x423)))+(((IkReal(-868750.000000000))*(cj1)*(x420)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x426=IKsin(j2);
IkReal x427=IKcos(j2);
IkReal x428=((px)*(sj1));
IkReal x429=((py)*(sj1));
IkReal x430=((IkReal(1.00000000000000))*(r00));
IkReal x431=((cj1)*(sj0));
IkReal x432=((IkReal(1.00000000000000))*(px));
IkReal x433=((IkReal(1.00000000000000))*(pz));
IkReal x434=((cj0)*(r01));
IkReal x435=((pz)*(sj1));
IkReal x436=((cj0)*(cj1));
IkReal x437=((IkReal(0.139000000000000))*(x426));
IkReal x438=((IkReal(0.139000000000000))*(x427));
IkReal x439=((IkReal(0.302800000000000))*(x426));
IkReal x440=((IkReal(0.302800000000000))*(x427));
IkReal x441=((sj3)*(x440));
IkReal x442=((cj3)*(x439));
IkReal x443=((cj3)*(x440));
IkReal x444=((sj3)*(x439));
IkReal x445=((x437)+(x442));
IkReal x446=((x438)+(x444)+(x443));
evalcond[0]=((((IkReal(-1.00000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(cj1)*(x433)))+(((cj0)*(x428)))+(x445)+(((sj0)*(x429))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x433)))+(((IkReal(-1.00000000000000))*(py)*(x431)))+(((IkReal(-1.00000000000000))*(x432)*(x436)))+(x446));
evalcond[2]=((((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(x429)*(x430)))+(((pz)*(r00)*(x431)))+(((IkReal(-1.00000000000000))*(cj1)*(x433)*(x434)))+(((r01)*(x428)))+(x441)+(((IkReal(-1.00000000000000))*(r02)*(x431)*(x432)))+(((py)*(r02)*(x436))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x429)))+(((x434)*(x435)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x430)))+(((IkReal(-1.00000000000000))*(sj0)*(x430)*(x435)))+(x446)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x428)))+(((IkReal(-0.190000000000000))*(x434)))+(((cj1)*(px)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x447=((cj0)*(px));
IkReal x448=((IkReal(757.000000000000))*(sj3));
IkReal x449=((cj1)*(r02));
IkReal x450=((py)*(sj0));
IkReal x451=((cj3)*(sj1));
IkReal x452=((r01)*(sj0));
IkReal x453=((cj0)*(r00));
IkReal x454=((IkReal(2500.00000000000))*(cj4));
IkReal x455=((cj1)*(pz));
IkReal x456=((IkReal(347.500000000000))*(sj1));
IkReal x457=((sj1)*(sj3)*(x454));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x447)*(x451)*(x454)))+(((IkReal(-1.00000000000000))*(x450)*(x451)*(x454)))+(((IkReal(-1.00000000000000))*(sj1)*(x448)*(x453)))+(((IkReal(-1.00000000000000))*(sj1)*(x448)*(x452)))+(((x448)*(x449)))+(((cj3)*(x454)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(sj3)*(x454)*(x455)))+(((IkReal(347.500000000000))*(x449)))+(((x447)*(x457)))+(((IkReal(-757.000000000000))*(x451)*(x452)))+(((IkReal(-757.000000000000))*(x451)*(x453)))+(((IkReal(757.000000000000))*(cj3)*(x449)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(-1.00000000000000))*(x453)*(x456)))+(((x450)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(x447)*(x451)*(x454)))+(((IkReal(-1.00000000000000))*(x450)*(x451)*(x454)))+(((IkReal(-1.00000000000000))*(sj1)*(x448)*(x453)))+(((IkReal(-1.00000000000000))*(sj1)*(x448)*(x452)))+(((x448)*(x449)))+(((cj3)*(x454)*(x455)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(sj3)*(x454)*(x455)))+(((IkReal(347.500000000000))*(x449)))+(((x447)*(x457)))+(((IkReal(-757.000000000000))*(x451)*(x452)))+(((IkReal(-757.000000000000))*(x451)*(x453)))+(((IkReal(757.000000000000))*(cj3)*(x449)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(-1.00000000000000))*(x453)*(x456)))+(((x450)*(x457)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x458=IKsin(j2);
IkReal x459=IKcos(j2);
IkReal x460=(pz)*(pz);
IkReal x461=(py)*(py);
IkReal x462=(px)*(px);
IkReal x463=((px)*(sj1));
IkReal x464=((sj0)*(sj1));
IkReal x465=((IkReal(2.00000000000000))*(pz));
IkReal x466=((IkReal(1.00000000000000))*(sj1));
IkReal x467=((pp)*(r02));
IkReal x468=((cj3)*(sj4));
IkReal x469=((py)*(r02));
IkReal x470=((cj1)*(sj0));
IkReal x471=((py)*(r00));
IkReal x472=((pp)*(r01));
IkReal x473=((IkReal(0.380000000000000))*(pz));
IkReal x474=((r01)*(sj1));
IkReal x475=((cj0)*(r02));
IkReal x476=((pz)*(r00));
IkReal x477=((IkReal(0.380000000000000))*(px));
IkReal x478=((IkReal(1.00000000000000))*(cj1));
IkReal x479=((cj0)*(r00));
IkReal x480=((IkReal(2.00000000000000))*(sj1));
IkReal x481=((cj0)*(r01));
IkReal x482=((IkReal(0.0361000000000000))*(cj1));
IkReal x483=((IkReal(0.0361000000000000))*(r01));
IkReal x484=((IkReal(2.00000000000000))*(py));
IkReal x485=((IkReal(0.0361000000000000))*(sj1));
IkReal x486=((cj1)*(r01));
IkReal x487=((cj1)*(px));
IkReal x488=((IkReal(2.00000000000000))*(cj1));
IkReal x489=((sj3)*(sj4));
IkReal x490=((IkReal(0.302800000000000))*(x458));
IkReal x491=((cj4)*(x459));
IkReal x492=((IkReal(0.139000000000000))*(x458));
IkReal x493=((IkReal(0.139000000000000))*(x459));
IkReal x494=((IkReal(0.302800000000000))*(x459));
IkReal x495=((r02)*(x460));
IkReal x496=((cj4)*(sj3)*(x458));
IkReal x497=((IkReal(2.00000000000000))*(r01)*(x461));
IkReal x498=((cj3)*(cj4)*(x458));
evalcond[0]=((x496)+(((sj1)*(x479)))+(((r01)*(x464)))+(((cj3)*(x491)))+(((IkReal(-1.00000000000000))*(r02)*(x478))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj3)*(x494)))+(((IkReal(-1.00000000000000))*(pz)*(x478)))+(x492)+(((cj0)*(x463)))+(((py)*(x464)))+(((cj3)*(x490))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x478)*(x479)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(r01)*(x470)))+(((sj3)*(x491)))+(((IkReal(-1.00000000000000))*(r02)*(x466))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x478)))+(x493)+(((IkReal(-1.00000000000000))*(py)*(x470)))+(((IkReal(-1.00000000000000))*(pz)*(x466)))+(((sj3)*(x490)))+(((cj3)*(x494))));
evalcond[4]=((((sj4)*(x492)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x470)))+(((IkReal(-1.00000000000000))*(x489)*(x494)))+(((x470)*(x476)))+(((cj0)*(cj1)*(x469)))+(((IkReal(-1.00000000000000))*(pz)*(x478)*(x481)))+(((x468)*(x490)))+(((r01)*(x463)))+(((IkReal(-1.00000000000000))*(x466)*(x471))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x466)*(x469)))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((px)*(x486)))+(((IkReal(-1.00000000000000))*(x468)*(x494)))+(((IkReal(-1.00000000000000))*(x464)*(x476)))+(((cj0)*(pz)*(x474)))+(((IkReal(-1.00000000000000))*(sj4)*(x493)))+(((IkReal(-1.00000000000000))*(x471)*(x478)))+(((IkReal(-0.190000000000000))*(x481)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r02)*(sj0)*(x463))));
evalcond[6]=((((IkReal(-0.111008840000000))*(x498)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(2.00000000000000))*(px)*(x470)*(x471)))+(((r00)*(x463)*(x465)))+(((x465)*(x469)*(x470)))+(((r02)*(x485)))+(((x470)*(x497)))+(((IkReal(-1.00000000000000))*(r00)*(x477)))+(((x470)*(x483)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((py)*(x465)*(x474)))+(((IkReal(-1.00000000000000))*(pp)*(x478)*(x479)))+(((x481)*(x484)*(x487)))+(((x465)*(x475)*(x487)))+(((x480)*(x495)))+(((IkReal(-1.00000000000000))*(x470)*(x472)))+(((x462)*(x479)*(x488)))+(((x479)*(x482)))+(((IkReal(0.0723668400000000))*(sj3)*(x491)))+(((IkReal(-0.0841784000000000))*(cj4)*(x458)))+(((IkReal(-1.00000000000000))*(r02)*(x473))));
evalcond[7]=((((py)*(x465)*(x486)))+(((IkReal(-2.00000000000000))*(sj0)*(x463)*(x471)))+(((x488)*(x495)))+(((IkReal(-1.00000000000000))*(x464)*(x465)*(x469)))+(((IkReal(-1.00000000000000))*(x467)*(x478)))+(((IkReal(0.380000000000000))*(sj0)*(x469)))+(((IkReal(-1.00000000000000))*(x463)*(x465)*(x475)))+(((x464)*(x483)))+(((IkReal(-1.00000000000000))*(x473)*(x479)))+(((IkReal(-1.00000000000000))*(x464)*(x497)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x473)))+(((pp)*(sj1)*(x479)))+(((IkReal(0.0841784000000000))*(x491)))+(((x464)*(x472)))+(((r00)*(x465)*(x487)))+(((IkReal(-1.00000000000000))*(x463)*(x481)*(x484)))+(((IkReal(0.0723668400000000))*(x496)))+(((x479)*(x485)))+(((x475)*(x477)))+(((IkReal(0.111008840000000))*(cj3)*(x491)))+(((IkReal(-1.00000000000000))*(x462)*(x479)*(x480)))+(((IkReal(-1.00000000000000))*(r02)*(x482))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x499=((cj0)*(r00));
IkReal x500=((cj1)*(sj3));
IkReal x501=((sj1)*(sj3));
IkReal x502=((IkReal(1.00000000000000))*(cj3));
IkReal x503=((r01)*(sj0));
IkReal x504=((x502)*(x503));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x499)*(x502)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x502)))+(((IkReal(-1.00000000000000))*(x501)*(x503)))+(((IkReal(-1.00000000000000))*(cj1)*(x504)))+(((IkReal(-1.00000000000000))*(x499)*(x501)))+(((r02)*(x500))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x504)))+(((x500)*(x503)))+(((x499)*(x500)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x499)*(x502)))+(((r02)*(x501))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x499)*(x502)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x502)))+(((IkReal(-1.00000000000000))*(x501)*(x503)))+(((IkReal(-1.00000000000000))*(cj1)*(x504)))+(((IkReal(-1.00000000000000))*(x499)*(x501)))+(((r02)*(x500)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x504)))+(((x500)*(x503)))+(((x499)*(x500)))+(((cj1)*(cj3)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(x499)*(x502)))+(((r02)*(x501)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x505=IKsin(j2);
IkReal x506=IKcos(j2);
IkReal x507=(pz)*(pz);
IkReal x508=(py)*(py);
IkReal x509=(px)*(px);
IkReal x510=((px)*(sj1));
IkReal x511=((sj0)*(sj1));
IkReal x512=((IkReal(2.00000000000000))*(pz));
IkReal x513=((IkReal(1.00000000000000))*(sj1));
IkReal x514=((pp)*(r02));
IkReal x515=((cj3)*(sj4));
IkReal x516=((py)*(r02));
IkReal x517=((cj1)*(sj0));
IkReal x518=((py)*(r00));
IkReal x519=((pp)*(r01));
IkReal x520=((IkReal(0.380000000000000))*(pz));
IkReal x521=((r01)*(sj1));
IkReal x522=((cj0)*(r02));
IkReal x523=((pz)*(r00));
IkReal x524=((IkReal(0.380000000000000))*(px));
IkReal x525=((IkReal(1.00000000000000))*(cj1));
IkReal x526=((cj0)*(r00));
IkReal x527=((IkReal(2.00000000000000))*(sj1));
IkReal x528=((cj0)*(r01));
IkReal x529=((IkReal(0.0361000000000000))*(cj1));
IkReal x530=((IkReal(0.0361000000000000))*(r01));
IkReal x531=((IkReal(2.00000000000000))*(py));
IkReal x532=((IkReal(0.0361000000000000))*(sj1));
IkReal x533=((cj1)*(r01));
IkReal x534=((cj1)*(px));
IkReal x535=((IkReal(2.00000000000000))*(cj1));
IkReal x536=((sj3)*(sj4));
IkReal x537=((IkReal(0.302800000000000))*(x505));
IkReal x538=((cj4)*(x506));
IkReal x539=((IkReal(0.139000000000000))*(x505));
IkReal x540=((IkReal(0.139000000000000))*(x506));
IkReal x541=((IkReal(0.302800000000000))*(x506));
IkReal x542=((r02)*(x507));
IkReal x543=((cj4)*(sj3)*(x505));
IkReal x544=((IkReal(2.00000000000000))*(r01)*(x508));
IkReal x545=((cj3)*(cj4)*(x505));
evalcond[0]=((((r01)*(x511)))+(((sj1)*(x526)))+(((IkReal(-1.00000000000000))*(r02)*(x525)))+(x543)+(((cj3)*(x538))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj3)*(x541)))+(((cj0)*(x510)))+(((py)*(x511)))+(x539)+(((IkReal(-1.00000000000000))*(pz)*(x525)))+(((cj3)*(x537))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x517)))+(((IkReal(-1.00000000000000))*(x525)*(x526)))+(((IkReal(-1.00000000000000))*(x545)))+(((sj3)*(x538)))+(((IkReal(-1.00000000000000))*(r02)*(x513))));
evalcond[3]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x525)))+(((IkReal(-1.00000000000000))*(py)*(x517)))+(((sj3)*(x537)))+(x540)+(((IkReal(-1.00000000000000))*(pz)*(x513)))+(((cj3)*(x541))));
evalcond[4]=((((r01)*(x510)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x517)))+(((x515)*(x537)))+(((IkReal(-1.00000000000000))*(x513)*(x518)))+(((x517)*(x523)))+(((IkReal(-1.00000000000000))*(pz)*(x525)*(x528)))+(((IkReal(-1.00000000000000))*(x536)*(x541)))+(((cj0)*(cj1)*(x516)))+(((sj4)*(x539))));
evalcond[5]=((((cj0)*(pz)*(x521)))+(((r02)*(sj0)*(x510)))+(((IkReal(-1.00000000000000))*(sj4)*(x540)))+(((px)*(x533)))+(((IkReal(-1.00000000000000))*(x518)*(x525)))+(((IkReal(-1.00000000000000))*(cj0)*(x513)*(x516)))+(((IkReal(-1.00000000000000))*(x511)*(x523)))+(((IkReal(-1.00000000000000))*(x515)*(x541)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x528)))+(((IkReal(-1.00000000000000))*(x536)*(x537))));
evalcond[6]=((((x512)*(x522)*(x534)))+(((r02)*(x532)))+(((x512)*(x516)*(x517)))+(((IkReal(2.00000000000000))*(px)*(x517)*(x518)))+(((x509)*(x526)*(x535)))+(((x526)*(x529)))+(((r00)*(x510)*(x512)))+(((IkReal(-0.0841784000000000))*(cj4)*(x505)))+(((py)*(x512)*(x521)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x524)))+(((IkReal(-1.00000000000000))*(x513)*(x514)))+(((x528)*(x531)*(x534)))+(((IkReal(-1.00000000000000))*(r02)*(x520)))+(((x517)*(x530)))+(((x517)*(x544)))+(((IkReal(-1.00000000000000))*(pp)*(x525)*(x526)))+(((IkReal(-1.00000000000000))*(x517)*(x519)))+(((IkReal(0.0723668400000000))*(sj3)*(x538)))+(((IkReal(-0.111008840000000))*(x545)))+(((x527)*(x542))));
evalcond[7]=((((IkReal(0.111008840000000))*(cj3)*(x538)))+(((x511)*(x519)))+(((x522)*(x524)))+(((IkReal(0.0723668400000000))*(x543)))+(((IkReal(-1.00000000000000))*(x511)*(x512)*(x516)))+(((r00)*(x512)*(x534)))+(((IkReal(-1.00000000000000))*(x520)*(x526)))+(((pp)*(sj1)*(x526)))+(((IkReal(-1.00000000000000))*(x511)*(x544)))+(((IkReal(-1.00000000000000))*(x510)*(x528)*(x531)))+(((IkReal(-1.00000000000000))*(x510)*(x512)*(x522)))+(((x526)*(x532)))+(((py)*(x512)*(x533)))+(((IkReal(-2.00000000000000))*(sj0)*(x510)*(x518)))+(((IkReal(0.380000000000000))*(sj0)*(x516)))+(((IkReal(-1.00000000000000))*(r02)*(x529)))+(((IkReal(-1.00000000000000))*(x509)*(x526)*(x527)))+(((IkReal(0.0841784000000000))*(x538)))+(((x535)*(x542)))+(((x511)*(x530)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x520)))+(((IkReal(-1.00000000000000))*(x514)*(x525))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x546=((IkReal(1000.00000000000))*(r02));
IkReal x547=((IkReal(1000.00000000000))*(r00));
IkReal x548=((IkReal(1000.00000000000))*(r01));
IkReal x549=((IkReal(190.000000000000))*(sj1));
IkReal x550=((cj0)*(r00));
IkReal x551=((IkReal(190.000000000000))*(cj1));
IkReal x552=((IkReal(190.000000000000))*(r01)*(sj0));
if( IKabs(((gconst0)*(((((py)*(x548)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x551)))+(((IkReal(-1.00000000000000))*(x550)*(x551)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(r02)*(x549)))+(((pz)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(px)*(x546)))+(((IkReal(-1.00000000000000))*(r02)*(x551)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x548)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x547)))+(((r01)*(sj0)*(x549)))+(((py)*(sj0)*(x546)))+(((x549)*(x550)))+(((IkReal(-302.800000000000))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((py)*(x548)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x551)))+(((IkReal(-1.00000000000000))*(x550)*(x551)))+(((px)*(x547)))+(((IkReal(-1.00000000000000))*(r02)*(x549)))+(((pz)*(x546)))))), ((gconst0)*(((((cj0)*(px)*(x546)))+(((IkReal(-1.00000000000000))*(r02)*(x551)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x548)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x547)))+(((r01)*(sj0)*(x549)))+(((py)*(sj0)*(x546)))+(((x549)*(x550)))+(((IkReal(-302.800000000000))*(cj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x553=IKcos(j3);
IkReal x554=((r01)*(sj0));
IkReal x555=((IkReal(0.190000000000000))*(cj1));
IkReal x556=((cj0)*(py));
IkReal x557=((px)*(sj0));
IkReal x558=((py)*(sj0));
IkReal x559=((r00)*(sj0));
IkReal x560=((cj0)*(r01));
IkReal x561=((IkReal(1.00000000000000))*(pz));
IkReal x562=((IkReal(1.00000000000000))*(pp));
IkReal x563=((IkReal(0.380000000000000))*(cj1));
IkReal x564=((cj0)*(r00));
IkReal x565=((IkReal(0.190000000000000))*(sj1));
IkReal x566=((IkReal(0.139000000000000))*(cj4));
IkReal x567=((cj0)*(px));
IkReal x568=((IkReal(2.00000000000000))*(px)*(py));
IkReal x569=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x570=((IkReal(0.0841784000000000))*(x553));
IkReal x571=((IkReal(0.380000000000000))*(pz)*(sj1));
IkReal x572=((IkReal(2.00000000000000))*(pz)*(r02));
evalcond[0]=((IkReal(0.0749088400000000))+(((x558)*(x563)))+(((x563)*(x567)))+(x571)+(x570)+(((IkReal(-1.00000000000000))*(x562))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(r00)))+(((x554)*(x555)))+(((x566)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((r02)*(x565)))+(((IkReal(-1.00000000000000))*(r02)*(x561)))+(((x555)*(x564))));
evalcond[2]=((((x564)*(x565)))+(((r02)*(x558)))+(((IkReal(-1.00000000000000))*(r02)*(x555)))+(((IkReal(-1.00000000000000))*(x554)*(x561)))+(((r02)*(x567)))+(((x554)*(x565)))+(((IkReal(-1.00000000000000))*(x561)*(x564)))+(((IkReal(-1.00000000000000))*(x553)*(x566)))+(((IkReal(-0.302800000000000))*(cj4))));
evalcond[3]=((((IkReal(-2.00000000000000))*(py)*(r01)*(x556)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x563)))+(((IkReal(-0.111008840000000))*(sj4)))+(((x559)*(x571)))+(((py)*(r00)*(x563)))+(((x556)*(x569)))+(((IkReal(0.0361000000000000))*(x560)))+(((IkReal(-1.00000000000000))*(x560)*(x571)))+(((x557)*(x572)))+(((IkReal(-1.00000000000000))*(x557)*(x569)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x557)))+(((pp)*(x560)))+(((IkReal(-1.00000000000000))*(x559)*(x562)))+(((IkReal(-1.00000000000000))*(sj4)*(x570)))+(((IkReal(-2.00000000000000))*(px)*(r00)*(x556)))+(((IkReal(-0.0361000000000000))*(x559)))+(((x554)*(x568)))+(((IkReal(-1.00000000000000))*(x556)*(x572))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x573=((IkReal(757.000000000000))*(cj4));
gconst2=IKsign(((((x573)*((sj3)*(sj3))))+(((IkReal(347.500000000000))*(cj3)*(cj4)))+(((x573)*((cj3)*(cj3))))));
IkReal x574=((IkReal(2.17841726618705))*(cj4));
dummyeval[0]=((((cj3)*(cj4)))+(((x574)*((cj3)*(cj3))))+(((x574)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x575=((IkReal(0.0841784000000000))*(cj3));
IkReal x576=(py)*(py);
IkReal x577=(px)*(px);
IkReal x578=(pz)*(pz);
IkReal x579=((r01)*(sj0));
IkReal x580=((IkReal(2.00000000000000))*(py));
IkReal x581=((IkReal(0.190000000000000))*(cj1));
IkReal x582=((cj0)*(py));
IkReal x583=((px)*(sj0));
IkReal x584=((r02)*(sj0));
IkReal x585=((pp)*(sj1));
IkReal x586=((cj1)*(pz));
IkReal x587=((cj0)*(px));
IkReal x588=((IkReal(2.00000000000000))*(r02));
IkReal x589=((r00)*(sj0));
IkReal x590=((cj0)*(pp));
IkReal x591=((IkReal(1.00000000000000))*(r02));
IkReal x592=((r00)*(sj1));
IkReal x593=((r01)*(sj1));
IkReal x594=((IkReal(0.380000000000000))*(cj1));
IkReal x595=((IkReal(0.380000000000000))*(pz));
IkReal x596=((IkReal(1.00000000000000))*(pp));
IkReal x597=((pz)*(sj1));
IkReal x598=((IkReal(0.0361000000000000))*(sj1));
IkReal x599=((cj0)*(r00));
IkReal x600=((IkReal(0.380000000000000))*(py));
IkReal x601=((IkReal(0.190000000000000))*(sj1));
IkReal x602=((cj0)*(r01));
IkReal x603=((IkReal(0.0361000000000000))*(cj1));
IkReal x604=((IkReal(1.00000000000000))*(pz));
IkReal x605=((IkReal(2.00000000000000))*(px));
IkReal x606=((px)*(r00));
IkReal x607=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x608=((IkReal(2.00000000000000))*(x577));
IkReal x609=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x610=((IkReal(2.00000000000000))*(x576));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x583)))+(x582));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x589)))+(x602));
evalcond[3]=((IkReal(0.0749088400000000))+(((py)*(sj0)*(x594)))+(((IkReal(-1.00000000000000))*(x596)))+(x575)+(((sj1)*(x595)))+(((x587)*(x594))));
evalcond[4]=((((sj1)*(x579)))+(((IkReal(-1.00000000000000))*(cj1)*(x591)))+(((cj0)*(x592))));
evalcond[5]=((((x579)*(x581)))+(((IkReal(-1.00000000000000))*(x606)))+(((IkReal(-1.00000000000000))*(pz)*(x591)))+(((x581)*(x599)))+(((r02)*(x601)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj1)*(x591)))+(((IkReal(-1.00000000000000))*(cj1)*(x599)))+(((IkReal(-1.00000000000000))*(cj1)*(x579))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x581)))+(((x579)*(x601)))+(((r02)*(x587)))+(((IkReal(-1.00000000000000))*(x579)*(x604)))+(((IkReal(-1.00000000000000))*(x599)*(x604)))+(((py)*(x584)))+(((IkReal(0.190000000000000))*(cj0)*(x592))));
evalcond[8]=((IkReal(-0.111008840000000))+(((IkReal(-1.00000000000000))*(x589)*(x596)))+(((IkReal(-1.00000000000000))*(cj0)*(x593)*(x595)))+(((x589)*(x608)))+(((r01)*(x590)))+(((pz)*(x583)*(x588)))+(((py)*(r00)*(x594)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(r02)*(x580)))+(((IkReal(-1.00000000000000))*(r00)*(x580)*(x587)))+(((px)*(x579)*(x580)))+(((x582)*(x607)))+(((sj1)*(x589)*(x595)))+(((IkReal(0.0361000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x594)))+(((IkReal(-0.0361000000000000))*(x589)))+(((IkReal(-1.00000000000000))*(x602)*(x610)))+(((IkReal(-1.00000000000000))*(x583)*(x607))));
evalcond[9]=((((IkReal(-1.00000000000000))*(r01)*(x600)))+(((x580)*(x584)*(x586)))+(((cj1)*(r00)*(x580)*(x583)))+(((x586)*(x587)*(x588)))+(((x579)*(x603)))+(((IkReal(-1.00000000000000))*(x590)*(x609)))+(((cj1)*(r01)*(x580)*(x587)))+(((IkReal(-1.00000000000000))*(x585)*(x591)))+(((cj1)*(x599)*(x608)))+(((sj1)*(x578)*(x588)))+(((r02)*(x598)))+(((IkReal(-1.00000000000000))*(r02)*(x595)))+(((pz)*(x592)*(x605)))+(((x599)*(x603)))+(((IkReal(-1.00000000000000))*(cj1)*(x579)*(x596)))+(((IkReal(-0.380000000000000))*(x606)))+(((cj1)*(x579)*(x610)))+(((pz)*(x580)*(x593))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x587)*(x588)*(x597)))+(((IkReal(0.0361000000000000))*(cj0)*(x592)))+(((x585)*(x599)))+(((x584)*(x600)))+(((x579)*(x585)))+(((r01)*(x580)*(x586)))+(((x579)*(x598)))+(((cj1)*(x578)*(x588)))+(((IkReal(0.380000000000000))*(r02)*(x587)))+(((IkReal(-1.00000000000000))*(x580)*(x584)*(x597)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x591)))+(((IkReal(-1.00000000000000))*(cj0)*(x592)*(x608)))+(((IkReal(-1.00000000000000))*(x580)*(x583)*(x592)))+(((IkReal(-1.00000000000000))*(x595)*(x599)))+(((IkReal(-1.00000000000000))*(x580)*(x587)*(x593)))+(((IkReal(-1.00000000000000))*(r02)*(x603)))+(((IkReal(-1.00000000000000))*(sj1)*(x579)*(x610)))+(((IkReal(-1.00000000000000))*(x579)*(x595)))+(((r00)*(x586)*(x605))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x611=((IkReal(1892500.00000000))*(cj3));
IkReal x612=((cj1)*(px));
IkReal x613=((IkReal(868750.000000000))*(r02));
IkReal x614=((pz)*(sj1));
IkReal x615=((IkReal(1892500.00000000))*(sj3));
IkReal x616=((IkReal(868750.000000000))*(py));
IkReal x617=((r00)*(sj1));
IkReal x618=((cj1)*(sj0));
IkReal x619=((pz)*(r00));
IkReal x620=((r02)*(sj0));
IkReal x621=((IkReal(868750.000000000))*(cj0));
IkReal x622=((px)*(r01)*(sj1));
IkReal x623=((cj0)*(cj1)*(py));
IkReal x624=((cj1)*(pz)*(r01));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x611)*(x612)*(x620)))+(((IkReal(-1.00000000000000))*(x614)*(x615)))+(((IkReal(-1.00000000000000))*(cj0)*(x612)*(x615)))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(868750.000000000))*(x622)))+(((x611)*(x618)*(x619)))+(((IkReal(868750.000000000))*(x618)*(x619)))+(((r02)*(x611)*(x623)))+(((x613)*(x623)))+(((IkReal(-1.00000000000000))*(cj0)*(x611)*(x624)))+(((x611)*(x622)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x615)*(x618)))+(((IkReal(-1.00000000000000))*(sj0)*(x612)*(x613)))+(((IkReal(-1.00000000000000))*(py)*(x611)*(x617)))+(((IkReal(-1.00000000000000))*(x616)*(x617))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(165062.500000000))+(((cj0)*(x615)*(x624)))+(((IkReal(-1.00000000000000))*(r02)*(x615)*(x623)))+(((py)*(x615)*(x617)))+(((IkReal(-1.00000000000000))*(x611)*(x614)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x621)))+(((IkReal(-1.00000000000000))*(x615)*(x618)*(x619)))+(((x612)*(x615)*(x620)))+(((IkReal(-868750.000000000))*(x614)))+(((IkReal(-1.00000000000000))*(py)*(x611)*(x618)))+(((IkReal(-1.00000000000000))*(x615)*(x622)))+(((IkReal(-1.00000000000000))*(x616)*(x618))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x611)*(x612)*(x620)))+(((IkReal(-1.00000000000000))*(x614)*(x615)))+(((IkReal(-1.00000000000000))*(cj0)*(x612)*(x615)))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(868750.000000000))*(x622)))+(((x611)*(x618)*(x619)))+(((IkReal(868750.000000000))*(x618)*(x619)))+(((r02)*(x611)*(x623)))+(((x613)*(x623)))+(((IkReal(-1.00000000000000))*(cj0)*(x611)*(x624)))+(((x611)*(x622)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x615)*(x618)))+(((IkReal(-1.00000000000000))*(sj0)*(x612)*(x613)))+(((IkReal(-1.00000000000000))*(py)*(x611)*(x617)))+(((IkReal(-1.00000000000000))*(x616)*(x617)))))), ((gconst4)*(((IkReal(165062.500000000))+(((cj0)*(x615)*(x624)))+(((IkReal(-1.00000000000000))*(r02)*(x615)*(x623)))+(((py)*(x615)*(x617)))+(((IkReal(-1.00000000000000))*(x611)*(x614)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x621)))+(((IkReal(-1.00000000000000))*(x615)*(x618)*(x619)))+(((x612)*(x615)*(x620)))+(((IkReal(-868750.000000000))*(x614)))+(((IkReal(-1.00000000000000))*(py)*(x611)*(x618)))+(((IkReal(-1.00000000000000))*(x615)*(x622)))+(((IkReal(-1.00000000000000))*(x616)*(x618)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x625=IKsin(j2);
IkReal x626=IKcos(j2);
IkReal x627=((px)*(sj1));
IkReal x628=((py)*(sj1));
IkReal x629=((IkReal(1.00000000000000))*(r00));
IkReal x630=((cj1)*(sj0));
IkReal x631=((IkReal(1.00000000000000))*(px));
IkReal x632=((IkReal(1.00000000000000))*(pz));
IkReal x633=((cj0)*(r01));
IkReal x634=((pz)*(sj1));
IkReal x635=((cj0)*(cj1));
IkReal x636=((IkReal(0.139000000000000))*(x625));
IkReal x637=((IkReal(0.139000000000000))*(x626));
IkReal x638=((IkReal(0.302800000000000))*(x625));
IkReal x639=((IkReal(0.302800000000000))*(x626));
IkReal x640=((cj3)*(x638));
IkReal x641=((sj3)*(x639));
IkReal x642=((cj3)*(x639));
IkReal x643=((sj3)*(x638));
IkReal x644=((x640)+(x636));
IkReal x645=((x643)+(x642)+(x637));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj1)*(x632)))+(((IkReal(-1.00000000000000))*(x641)))+(((cj0)*(x627)))+(((sj0)*(x628)))+(x644));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(py)*(x630)))+(((IkReal(-1.00000000000000))*(x631)*(x635)))+(x645)+(((IkReal(-1.00000000000000))*(sj1)*(x632))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(x628)*(x629)))+(((py)*(r02)*(x635)))+(((IkReal(-1.00000000000000))*(x641)))+(((r01)*(x627)))+(((IkReal(-1.00000000000000))*(cj1)*(x632)*(x633)))+(x644)+(((pz)*(r00)*(x630))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x628)))+(((IkReal(-1.00000000000000))*(x645)))+(((IkReal(-0.190000000000000))*(x633)))+(((r02)*(sj0)*(x627)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x629)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj1)*(px)*(r01)))+(((x633)*(x634)))+(((IkReal(-1.00000000000000))*(sj0)*(x629)*(x634))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x646=((cj1)*(pz));
IkReal x647=((IkReal(1892500.00000000))*(sj1));
IkReal x648=((py)*(sj0));
IkReal x649=((IkReal(1892500.00000000))*(sj3));
IkReal x650=((IkReal(868750.000000000))*(sj1));
IkReal x651=((IkReal(1892500.00000000))*(cj3));
IkReal x652=((cj0)*(px));
IkReal x653=((cj1)*(x652));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x648)*(x649)))+(((IkReal(-1.00000000000000))*(x646)*(x651)))+(((x648)*(x650)))+(((cj3)*(x647)*(x648)))+(((cj3)*(x647)*(x652)))+(((IkReal(-868750.000000000))*(x646)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x647)))+(((IkReal(-1.00000000000000))*(x649)*(x653)))+(((x650)*(x652))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x651)*(x653)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x647)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-868750.000000000))*(x653)))+(((IkReal(-1.00000000000000))*(sj3)*(x647)*(x652)))+(((IkReal(-1.00000000000000))*(sj3)*(x647)*(x648)))+(((IkReal(-1.00000000000000))*(pz)*(x650)))+(((IkReal(-868750.000000000))*(cj1)*(x648)))+(((x646)*(x649)))+(((IkReal(-1.00000000000000))*(cj1)*(x648)*(x651))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x648)*(x649)))+(((IkReal(-1.00000000000000))*(x646)*(x651)))+(((x648)*(x650)))+(((cj3)*(x647)*(x648)))+(((cj3)*(x647)*(x652)))+(((IkReal(-868750.000000000))*(x646)))+(((IkReal(359575.000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x647)))+(((IkReal(-1.00000000000000))*(x649)*(x653)))+(((x650)*(x652)))))), ((gconst3)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x651)*(x653)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x647)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-868750.000000000))*(x653)))+(((IkReal(-1.00000000000000))*(sj3)*(x647)*(x652)))+(((IkReal(-1.00000000000000))*(sj3)*(x647)*(x648)))+(((IkReal(-1.00000000000000))*(pz)*(x650)))+(((IkReal(-868750.000000000))*(cj1)*(x648)))+(((x646)*(x649)))+(((IkReal(-1.00000000000000))*(cj1)*(x648)*(x651)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x654=IKsin(j2);
IkReal x655=IKcos(j2);
IkReal x656=((px)*(sj1));
IkReal x657=((py)*(sj1));
IkReal x658=((IkReal(1.00000000000000))*(r00));
IkReal x659=((cj1)*(sj0));
IkReal x660=((IkReal(1.00000000000000))*(px));
IkReal x661=((IkReal(1.00000000000000))*(pz));
IkReal x662=((cj0)*(r01));
IkReal x663=((pz)*(sj1));
IkReal x664=((cj0)*(cj1));
IkReal x665=((IkReal(0.139000000000000))*(x654));
IkReal x666=((IkReal(0.139000000000000))*(x655));
IkReal x667=((IkReal(0.302800000000000))*(x654));
IkReal x668=((IkReal(0.302800000000000))*(x655));
IkReal x669=((cj3)*(x667));
IkReal x670=((sj3)*(x668));
IkReal x671=((cj3)*(x668));
IkReal x672=((sj3)*(x667));
IkReal x673=((x669)+(x665));
IkReal x674=((x666)+(x672)+(x671));
evalcond[0]=((((sj0)*(x657)))+(((IkReal(-1.00000000000000))*(cj1)*(x661)))+(x673)+(((cj0)*(x656)))+(((IkReal(-1.00000000000000))*(x670))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x661)))+(((IkReal(-1.00000000000000))*(x660)*(x664)))+(((IkReal(-1.00000000000000))*(py)*(x659)))+(x674));
evalcond[2]=((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((py)*(r02)*(x664)))+(((IkReal(-1.00000000000000))*(r02)*(x659)*(x660)))+(x673)+(((IkReal(-1.00000000000000))*(cj1)*(x661)*(x662)))+(((pz)*(r00)*(x659)))+(((r01)*(x656)))+(((IkReal(-1.00000000000000))*(x670))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x658)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x657)))+(((x662)*(x663)))+(((IkReal(-1.00000000000000))*(sj0)*(x658)*(x663)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x662)))+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x656)))+(((IkReal(-1.00000000000000))*(x674))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x675=((IkReal(0.0841784000000000))*(cj3));
IkReal x676=(py)*(py);
IkReal x677=(px)*(px);
IkReal x678=(pz)*(pz);
IkReal x679=((r01)*(sj0));
IkReal x680=((IkReal(2.00000000000000))*(py));
IkReal x681=((IkReal(0.190000000000000))*(cj1));
IkReal x682=((cj0)*(py));
IkReal x683=((px)*(sj0));
IkReal x684=((r02)*(sj0));
IkReal x685=((pp)*(sj1));
IkReal x686=((cj1)*(pz));
IkReal x687=((cj0)*(px));
IkReal x688=((IkReal(2.00000000000000))*(r02));
IkReal x689=((r00)*(sj0));
IkReal x690=((cj0)*(pp));
IkReal x691=((IkReal(1.00000000000000))*(r02));
IkReal x692=((r00)*(sj1));
IkReal x693=((r01)*(sj1));
IkReal x694=((IkReal(0.380000000000000))*(cj1));
IkReal x695=((IkReal(0.380000000000000))*(pz));
IkReal x696=((IkReal(1.00000000000000))*(pp));
IkReal x697=((pz)*(sj1));
IkReal x698=((IkReal(0.0361000000000000))*(sj1));
IkReal x699=((cj0)*(r00));
IkReal x700=((IkReal(0.380000000000000))*(py));
IkReal x701=((IkReal(0.190000000000000))*(sj1));
IkReal x702=((cj0)*(r01));
IkReal x703=((IkReal(0.0361000000000000))*(cj1));
IkReal x704=((IkReal(1.00000000000000))*(pz));
IkReal x705=((IkReal(2.00000000000000))*(px));
IkReal x706=((px)*(r00));
IkReal x707=((IkReal(0.380000000000000))*(r02)*(sj1));
IkReal x708=((IkReal(2.00000000000000))*(x677));
IkReal x709=((IkReal(1.00000000000000))*(cj1)*(r00));
IkReal x710=((IkReal(2.00000000000000))*(x676));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((x682)+(((IkReal(-1.00000000000000))*(x683))));
evalcond[2]=((IkReal(1.00000000000000))+(x702)+(((IkReal(-1.00000000000000))*(x689))));
evalcond[3]=((IkReal(0.0749088400000000))+(((py)*(sj0)*(x694)))+(((x687)*(x694)))+(((sj1)*(x695)))+(x675)+(((IkReal(-1.00000000000000))*(x696))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(x691)))+(((sj1)*(x679)))+(((cj0)*(x692))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x706)))+(((x681)*(x699)))+(((x679)*(x681)))+(((IkReal(-1.00000000000000))*(pz)*(x691)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((r02)*(x701))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj1)*(x691)))+(((IkReal(-1.00000000000000))*(cj1)*(x699)))+(((IkReal(-1.00000000000000))*(cj1)*(x679))));
evalcond[7]=((((x679)*(x701)))+(((IkReal(-1.00000000000000))*(x679)*(x704)))+(((IkReal(0.190000000000000))*(cj0)*(x692)))+(((IkReal(-1.00000000000000))*(r02)*(x681)))+(((IkReal(-1.00000000000000))*(x699)*(x704)))+(((py)*(x684)))+(((r02)*(x687))));
evalcond[8]=((IkReal(0.111008840000000))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(r02)*(x680)))+(((sj1)*(x689)*(x695)))+(((pz)*(x683)*(x688)))+(((px)*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x702)*(x710)))+(((x682)*(x707)))+(((x689)*(x708)))+(((IkReal(-0.0361000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x683)*(x707)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x694)))+(((py)*(r00)*(x694)))+(x675)+(((IkReal(-1.00000000000000))*(x689)*(x696)))+(((IkReal(-1.00000000000000))*(cj0)*(x693)*(x695)))+(((IkReal(0.0361000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(r00)*(x680)*(x687)))+(((r01)*(x690))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj1)*(x679)*(x696)))+(((cj1)*(r01)*(x680)*(x687)))+(((pz)*(x692)*(x705)))+(((x679)*(x703)))+(((pz)*(x680)*(x693)))+(((IkReal(-1.00000000000000))*(x690)*(x709)))+(((r02)*(x698)))+(((cj1)*(r00)*(x680)*(x683)))+(((IkReal(-1.00000000000000))*(x685)*(x691)))+(((x680)*(x684)*(x686)))+(((sj1)*(x678)*(x688)))+(((IkReal(-1.00000000000000))*(r02)*(x695)))+(((cj1)*(x679)*(x710)))+(((IkReal(-1.00000000000000))*(r01)*(x700)))+(((cj1)*(x699)*(x708)))+(((x686)*(x687)*(x688)))+(((x699)*(x703)))+(((IkReal(-0.380000000000000))*(x706))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj0)*(x692)*(x708)))+(((IkReal(-1.00000000000000))*(r02)*(x703)))+(((r01)*(x680)*(x686)))+(((IkReal(0.0361000000000000))*(cj0)*(x692)))+(((IkReal(-1.00000000000000))*(x680)*(x684)*(x697)))+(((r00)*(x686)*(x705)))+(((cj1)*(x678)*(x688)))+(((IkReal(-1.00000000000000))*(x680)*(x687)*(x693)))+(((x684)*(x700)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x691)))+(((x679)*(x685)))+(((IkReal(-1.00000000000000))*(x687)*(x688)*(x697)))+(((x679)*(x698)))+(((IkReal(-1.00000000000000))*(x695)*(x699)))+(((x685)*(x699)))+(((IkReal(-1.00000000000000))*(sj1)*(x679)*(x710)))+(((IkReal(0.380000000000000))*(r02)*(x687)))+(((IkReal(-1.00000000000000))*(x679)*(x695)))+(((IkReal(-1.00000000000000))*(x680)*(x683)*(x692))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(-120756.250000000))+(((IkReal(-573049.000000000))*((cj3)*(cj3))))+(((IkReal(-526115.000000000))*(cj3)))+(((IkReal(-573049.000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-4.74550178562186))*((cj3)*(cj3))))+(((IkReal(-4.35683453237410))*(cj3)))+(((IkReal(-4.74550178562186))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x711=((IkReal(1892500.00000000))*(cj3));
IkReal x712=((cj1)*(px));
IkReal x713=((IkReal(868750.000000000))*(r02));
IkReal x714=((pz)*(sj1));
IkReal x715=((IkReal(1892500.00000000))*(sj3));
IkReal x716=((IkReal(868750.000000000))*(py));
IkReal x717=((r00)*(sj1));
IkReal x718=((cj1)*(sj0));
IkReal x719=((pz)*(r00));
IkReal x720=((r02)*(sj0));
IkReal x721=((px)*(r01)*(sj1));
IkReal x722=((cj0)*(cj1)*(py));
IkReal x723=((cj0)*(cj1)*(pz)*(r01));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((IkReal(-1.00000000000000))*(x713)*(x722)))+(((sj0)*(x712)*(x713)))+(((IkReal(-1.00000000000000))*(py)*(x715)*(x718)))+(((IkReal(868750.000000000))*(x723)))+(((x711)*(x712)*(x720)))+(((x711)*(x723)))+(((IkReal(-868750.000000000))*(x721)))+(((IkReal(-1.00000000000000))*(cj0)*(x712)*(x715)))+(((IkReal(-1.00000000000000))*(r02)*(x711)*(x722)))+(((IkReal(359575.000000000))*(sj3)))+(((py)*(x711)*(x717)))+(((x716)*(x717)))+(((IkReal(-1.00000000000000))*(x711)*(x721)))+(((IkReal(-868750.000000000))*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(x711)*(x718)*(x719))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x711)*(x714)))+(((IkReal(-1.00000000000000))*(py)*(x715)*(x717)))+(((IkReal(-868750.000000000))*(cj0)*(x712)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x716)*(x718)))+(((IkReal(-1.00000000000000))*(cj0)*(x711)*(x712)))+(((IkReal(-868750.000000000))*(x714)))+(((IkReal(-1.00000000000000))*(x712)*(x715)*(x720)))+(((r02)*(x715)*(x722)))+(((IkReal(-1.00000000000000))*(x715)*(x723)))+(((x715)*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(py)*(x711)*(x718)))+(((x715)*(x721))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((IkReal(-1.00000000000000))*(x713)*(x722)))+(((sj0)*(x712)*(x713)))+(((IkReal(-1.00000000000000))*(py)*(x715)*(x718)))+(((IkReal(868750.000000000))*(x723)))+(((x711)*(x712)*(x720)))+(((x711)*(x723)))+(((IkReal(-868750.000000000))*(x721)))+(((IkReal(-1.00000000000000))*(cj0)*(x712)*(x715)))+(((IkReal(-1.00000000000000))*(r02)*(x711)*(x722)))+(((IkReal(359575.000000000))*(sj3)))+(((py)*(x711)*(x717)))+(((x716)*(x717)))+(((IkReal(-1.00000000000000))*(x711)*(x721)))+(((IkReal(-868750.000000000))*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(x711)*(x718)*(x719)))))), ((gconst6)*(((IkReal(165062.500000000))+(((IkReal(-1.00000000000000))*(x711)*(x714)))+(((IkReal(-1.00000000000000))*(py)*(x715)*(x717)))+(((IkReal(-868750.000000000))*(cj0)*(x712)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x716)*(x718)))+(((IkReal(-1.00000000000000))*(cj0)*(x711)*(x712)))+(((IkReal(-868750.000000000))*(x714)))+(((IkReal(-1.00000000000000))*(x712)*(x715)*(x720)))+(((r02)*(x715)*(x722)))+(((IkReal(-1.00000000000000))*(x715)*(x723)))+(((x715)*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(py)*(x711)*(x718)))+(((x715)*(x721)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x724=IKsin(j2);
IkReal x725=IKcos(j2);
IkReal x726=((px)*(sj1));
IkReal x727=((py)*(sj1));
IkReal x728=((IkReal(1.00000000000000))*(r00));
IkReal x729=((cj1)*(sj0));
IkReal x730=((IkReal(1.00000000000000))*(px));
IkReal x731=((IkReal(1.00000000000000))*(pz));
IkReal x732=((cj0)*(r01));
IkReal x733=((pz)*(sj1));
IkReal x734=((cj0)*(cj1));
IkReal x735=((IkReal(0.139000000000000))*(x724));
IkReal x736=((IkReal(0.139000000000000))*(x725));
IkReal x737=((IkReal(0.302800000000000))*(x724));
IkReal x738=((IkReal(0.302800000000000))*(x725));
IkReal x739=((sj3)*(x738));
IkReal x740=((cj3)*(x737));
IkReal x741=((cj3)*(x738));
IkReal x742=((sj3)*(x737));
IkReal x743=((x735)+(x740));
IkReal x744=((x736)+(x742)+(x741));
evalcond[0]=((((cj0)*(x726)))+(((IkReal(-1.00000000000000))*(cj1)*(x731)))+(((IkReal(-1.00000000000000))*(x739)))+(x743)+(((sj0)*(x727))));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(x730)*(x734)))+(((IkReal(-1.00000000000000))*(sj1)*(x731)))+(((IkReal(-1.00000000000000))*(py)*(x729)))+(x744));
evalcond[2]=((((IkReal(-1.00000000000000))*(x727)*(x728)))+(((r01)*(x726)))+(((py)*(r02)*(x734)))+(((pz)*(r00)*(x729)))+(((IkReal(-1.00000000000000))*(r02)*(x729)*(x730)))+(x739)+(((IkReal(-1.00000000000000))*(x743)))+(((IkReal(-1.00000000000000))*(cj1)*(x731)*(x732))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x728)))+(((r02)*(sj0)*(x726)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x744)+(((IkReal(-1.00000000000000))*(sj0)*(x728)*(x733)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x727)))+(((cj1)*(px)*(r01)))+(((x732)*(x733)))+(((IkReal(-0.190000000000000))*(x732))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x745=((cj1)*(pz));
IkReal x746=((IkReal(1892500.00000000))*(sj1));
IkReal x747=((py)*(sj0));
IkReal x748=((IkReal(1892500.00000000))*(sj3));
IkReal x749=((IkReal(868750.000000000))*(sj1));
IkReal x750=((IkReal(1892500.00000000))*(cj3));
IkReal x751=((cj0)*(px));
IkReal x752=((cj1)*(x751));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x745)*(x750)))+(((x747)*(x749)))+(((cj3)*(x746)*(x747)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)*(x748)))+(((IkReal(359575.000000000))*(sj3)))+(((cj3)*(x746)*(x751)))+(((IkReal(-868750.000000000))*(x745)))+(((x749)*(x751)))+(((IkReal(-1.00000000000000))*(x748)*(x752)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x746))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(165062.500000000))+(((x745)*(x748)))+(((IkReal(-1.00000000000000))*(x750)*(x752)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x746)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)*(x750)))+(((IkReal(-1.00000000000000))*(sj3)*(x746)*(x751)))+(((IkReal(-1.00000000000000))*(pz)*(x749)))+(((IkReal(-1.00000000000000))*(sj3)*(x746)*(x747)))+(((IkReal(-868750.000000000))*(cj1)*(x747)))+(((IkReal(-868750.000000000))*(x752))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x745)*(x750)))+(((x747)*(x749)))+(((cj3)*(x746)*(x747)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)*(x748)))+(((IkReal(359575.000000000))*(sj3)))+(((cj3)*(x746)*(x751)))+(((IkReal(-868750.000000000))*(x745)))+(((x749)*(x751)))+(((IkReal(-1.00000000000000))*(x748)*(x752)))+(((IkReal(-1.00000000000000))*(pz)*(sj3)*(x746)))))), ((gconst5)*(((IkReal(165062.500000000))+(((x745)*(x748)))+(((IkReal(-1.00000000000000))*(x750)*(x752)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(x746)))+(((IkReal(359575.000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)*(x750)))+(((IkReal(-1.00000000000000))*(sj3)*(x746)*(x751)))+(((IkReal(-1.00000000000000))*(pz)*(x749)))+(((IkReal(-1.00000000000000))*(sj3)*(x746)*(x747)))+(((IkReal(-868750.000000000))*(cj1)*(x747)))+(((IkReal(-868750.000000000))*(x752)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x753=IKsin(j2);
IkReal x754=IKcos(j2);
IkReal x755=((px)*(sj1));
IkReal x756=((py)*(sj1));
IkReal x757=((IkReal(1.00000000000000))*(r00));
IkReal x758=((cj1)*(sj0));
IkReal x759=((IkReal(1.00000000000000))*(px));
IkReal x760=((IkReal(1.00000000000000))*(pz));
IkReal x761=((cj0)*(r01));
IkReal x762=((pz)*(sj1));
IkReal x763=((cj0)*(cj1));
IkReal x764=((IkReal(0.139000000000000))*(x753));
IkReal x765=((IkReal(0.139000000000000))*(x754));
IkReal x766=((IkReal(0.302800000000000))*(x753));
IkReal x767=((IkReal(0.302800000000000))*(x754));
IkReal x768=((sj3)*(x767));
IkReal x769=((cj3)*(x766));
IkReal x770=((cj3)*(x767));
IkReal x771=((sj3)*(x766));
IkReal x772=((x769)+(x764));
IkReal x773=((x771)+(x770)+(x765));
evalcond[0]=((((sj0)*(x756)))+(((IkReal(-1.00000000000000))*(x768)))+(((IkReal(-1.00000000000000))*(cj1)*(x760)))+(((cj0)*(x755)))+(x772));
evalcond[1]=((IkReal(0.190000000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x760)))+(x773)+(((IkReal(-1.00000000000000))*(py)*(x758)))+(((IkReal(-1.00000000000000))*(x759)*(x763))));
evalcond[2]=((((pz)*(r00)*(x758)))+(((IkReal(-1.00000000000000))*(cj1)*(x760)*(x761)))+(((py)*(r02)*(x763)))+(((r01)*(x755)))+(((IkReal(-1.00000000000000))*(r02)*(x758)*(x759)))+(((IkReal(-1.00000000000000))*(x756)*(x757)))+(x768)+(((IkReal(-1.00000000000000))*(x772))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x761)))+(((x761)*(x762)))+(((r02)*(sj0)*(x755)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x757)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x773)+(((IkReal(-1.00000000000000))*(sj0)*(x757)*(x762)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x756))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x774=((cj0)*(px));
IkReal x775=((IkReal(757.000000000000))*(sj3));
IkReal x776=((cj1)*(r02));
IkReal x777=((py)*(sj0));
IkReal x778=((cj3)*(sj1));
IkReal x779=((r01)*(sj0));
IkReal x780=((cj0)*(r00));
IkReal x781=((IkReal(2500.00000000000))*(cj4));
IkReal x782=((cj1)*(pz));
IkReal x783=((IkReal(347.500000000000))*(sj1));
IkReal x784=((sj1)*(sj3)*(x781));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x774)*(x778)*(x781)))+(((IkReal(-1.00000000000000))*(x777)*(x778)*(x781)))+(((IkReal(-1.00000000000000))*(sj1)*(x775)*(x780)))+(((cj3)*(x781)*(x782)))+(((IkReal(-1.00000000000000))*(sj1)*(x775)*(x779)))+(((x775)*(x776))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((x774)*(x784)))+(((IkReal(-757.000000000000))*(x778)*(x779)))+(((IkReal(347.500000000000))*(x776)))+(((IkReal(-757.000000000000))*(x778)*(x780)))+(((IkReal(-1.00000000000000))*(sj3)*(x781)*(x782)))+(((IkReal(757.000000000000))*(cj3)*(x776)))+(((x777)*(x784)))+(((IkReal(-1.00000000000000))*(x780)*(x783)))+(((IkReal(-1.00000000000000))*(x779)*(x783))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(x774)*(x778)*(x781)))+(((IkReal(-1.00000000000000))*(x777)*(x778)*(x781)))+(((IkReal(-1.00000000000000))*(sj1)*(x775)*(x780)))+(((cj3)*(x781)*(x782)))+(((IkReal(-1.00000000000000))*(sj1)*(x775)*(x779)))+(((x775)*(x776)))))), ((gconst2)*(((((x774)*(x784)))+(((IkReal(-757.000000000000))*(x778)*(x779)))+(((IkReal(347.500000000000))*(x776)))+(((IkReal(-757.000000000000))*(x778)*(x780)))+(((IkReal(-1.00000000000000))*(sj3)*(x781)*(x782)))+(((IkReal(757.000000000000))*(cj3)*(x776)))+(((x777)*(x784)))+(((IkReal(-1.00000000000000))*(x780)*(x783)))+(((IkReal(-1.00000000000000))*(x779)*(x783)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x785=IKsin(j2);
IkReal x786=IKcos(j2);
IkReal x787=(pz)*(pz);
IkReal x788=(py)*(py);
IkReal x789=(px)*(px);
IkReal x790=((px)*(sj1));
IkReal x791=((sj0)*(sj1));
IkReal x792=((IkReal(2.00000000000000))*(pz));
IkReal x793=((IkReal(1.00000000000000))*(sj1));
IkReal x794=((pp)*(r02));
IkReal x795=((cj3)*(sj4));
IkReal x796=((py)*(r02));
IkReal x797=((cj1)*(sj0));
IkReal x798=((py)*(r00));
IkReal x799=((pp)*(r01));
IkReal x800=((IkReal(0.380000000000000))*(pz));
IkReal x801=((r01)*(sj1));
IkReal x802=((cj0)*(r02));
IkReal x803=((pz)*(r00));
IkReal x804=((IkReal(0.380000000000000))*(px));
IkReal x805=((IkReal(1.00000000000000))*(cj1));
IkReal x806=((cj0)*(r00));
IkReal x807=((IkReal(2.00000000000000))*(sj1));
IkReal x808=((cj0)*(r01));
IkReal x809=((IkReal(0.0361000000000000))*(cj1));
IkReal x810=((IkReal(0.0361000000000000))*(r01));
IkReal x811=((IkReal(2.00000000000000))*(py));
IkReal x812=((IkReal(0.0361000000000000))*(sj1));
IkReal x813=((cj1)*(r01));
IkReal x814=((cj1)*(px));
IkReal x815=((IkReal(2.00000000000000))*(cj1));
IkReal x816=((sj3)*(sj4));
IkReal x817=((IkReal(0.302800000000000))*(x785));
IkReal x818=((cj4)*(x786));
IkReal x819=((IkReal(0.139000000000000))*(x785));
IkReal x820=((IkReal(0.139000000000000))*(x786));
IkReal x821=((IkReal(0.302800000000000))*(x786));
IkReal x822=((r02)*(x787));
IkReal x823=((cj4)*(sj3)*(x785));
IkReal x824=((IkReal(2.00000000000000))*(r01)*(x788));
IkReal x825=((cj3)*(cj4)*(x785));
evalcond[0]=((((cj3)*(x818)))+(((r01)*(x791)))+(((IkReal(-1.00000000000000))*(r02)*(x805)))+(((sj1)*(x806)))+(x823));
evalcond[1]=((((cj3)*(x817)))+(((py)*(x791)))+(((IkReal(-1.00000000000000))*(sj3)*(x821)))+(x819)+(((cj0)*(x790)))+(((IkReal(-1.00000000000000))*(pz)*(x805))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x797)))+(((IkReal(-1.00000000000000))*(x805)*(x806)))+(((sj3)*(x818)))+(((IkReal(-1.00000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(r02)*(x793))));
evalcond[3]=((IkReal(0.190000000000000))+(((sj3)*(x817)))+(((IkReal(-1.00000000000000))*(pz)*(x793)))+(x820)+(((IkReal(-1.00000000000000))*(py)*(x797)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x805)))+(((cj3)*(x821))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x816)*(x821)))+(((sj4)*(x819)))+(((r01)*(x790)))+(((IkReal(-1.00000000000000))*(x793)*(x798)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x797)))+(((x797)*(x803)))+(((cj0)*(cj1)*(x796)))+(((x795)*(x817)))+(((IkReal(-1.00000000000000))*(pz)*(x805)*(x808))));
evalcond[5]=((((IkReal(-0.190000000000000))*(x808)))+(((r02)*(sj0)*(x790)))+(((IkReal(-1.00000000000000))*(x795)*(x821)))+(((IkReal(-1.00000000000000))*(x798)*(x805)))+(((IkReal(-1.00000000000000))*(x816)*(x817)))+(((px)*(x813)))+(((cj0)*(pz)*(x801)))+(((IkReal(-1.00000000000000))*(cj0)*(x793)*(x796)))+(((IkReal(-1.00000000000000))*(sj4)*(x820)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x791)*(x803))));
evalcond[6]=((((r00)*(x790)*(x792)))+(((x797)*(x810)))+(((x808)*(x811)*(x814)))+(((IkReal(-1.00000000000000))*(pp)*(x805)*(x806)))+(((x806)*(x809)))+(((IkReal(0.0723668400000000))*(sj3)*(x818)))+(((IkReal(-1.00000000000000))*(x793)*(x794)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(r02)*(x800)))+(((IkReal(2.00000000000000))*(px)*(x797)*(x798)))+(((x792)*(x796)*(x797)))+(((IkReal(-1.00000000000000))*(r00)*(x804)))+(((x789)*(x806)*(x815)))+(((IkReal(-1.00000000000000))*(x797)*(x799)))+(((x792)*(x802)*(x814)))+(((x807)*(x822)))+(((IkReal(-0.0841784000000000))*(cj4)*(x785)))+(((py)*(x792)*(x801)))+(((IkReal(-0.111008840000000))*(x825)))+(((r02)*(x812)))+(((x797)*(x824))));
evalcond[7]=((((x791)*(x810)))+(((IkReal(0.111008840000000))*(cj3)*(x818)))+(((IkReal(-1.00000000000000))*(x791)*(x824)))+(((IkReal(0.0841784000000000))*(x818)))+(((x815)*(x822)))+(((r00)*(x792)*(x814)))+(((IkReal(-2.00000000000000))*(sj0)*(x790)*(x798)))+(((IkReal(-1.00000000000000))*(r02)*(x809)))+(((IkReal(-1.00000000000000))*(x789)*(x806)*(x807)))+(((IkReal(-1.00000000000000))*(x790)*(x808)*(x811)))+(((IkReal(-1.00000000000000))*(x800)*(x806)))+(((py)*(x792)*(x813)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x800)))+(((IkReal(0.0723668400000000))*(x823)))+(((IkReal(0.380000000000000))*(sj0)*(x796)))+(((IkReal(-1.00000000000000))*(x790)*(x792)*(x802)))+(((x806)*(x812)))+(((pp)*(sj1)*(x806)))+(((IkReal(-1.00000000000000))*(x794)*(x805)))+(((IkReal(-1.00000000000000))*(x791)*(x792)*(x796)))+(((x802)*(x804)))+(((x791)*(x799))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x826=((cj0)*(r00));
IkReal x827=((cj1)*(sj3));
IkReal x828=((sj1)*(sj3));
IkReal x829=((IkReal(1.00000000000000))*(cj3));
IkReal x830=((r01)*(sj0));
IkReal x831=((x829)*(x830));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj1)*(x829)))+(((IkReal(-1.00000000000000))*(x828)*(x830)))+(((IkReal(-1.00000000000000))*(cj1)*(x831)))+(((r02)*(x827)))+(((IkReal(-1.00000000000000))*(cj1)*(x826)*(x829)))+(((IkReal(-1.00000000000000))*(x826)*(x828))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x831)))+(((IkReal(-1.00000000000000))*(sj1)*(x826)*(x829)))+(((x827)*(x830)))+(((cj1)*(cj3)*(r02)))+(((r02)*(x828)))+(((x826)*(x827))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj1)*(x829)))+(((IkReal(-1.00000000000000))*(x828)*(x830)))+(((IkReal(-1.00000000000000))*(cj1)*(x831)))+(((r02)*(x827)))+(((IkReal(-1.00000000000000))*(cj1)*(x826)*(x829)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(sj1)*(x831)))+(((IkReal(-1.00000000000000))*(sj1)*(x826)*(x829)))+(((x827)*(x830)))+(((cj1)*(cj3)*(r02)))+(((r02)*(x828)))+(((x826)*(x827)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x832=IKsin(j2);
IkReal x833=IKcos(j2);
IkReal x834=(pz)*(pz);
IkReal x835=(py)*(py);
IkReal x836=(px)*(px);
IkReal x837=((px)*(sj1));
IkReal x838=((sj0)*(sj1));
IkReal x839=((IkReal(2.00000000000000))*(pz));
IkReal x840=((IkReal(1.00000000000000))*(sj1));
IkReal x841=((pp)*(r02));
IkReal x842=((cj3)*(sj4));
IkReal x843=((py)*(r02));
IkReal x844=((cj1)*(sj0));
IkReal x845=((py)*(r00));
IkReal x846=((pp)*(r01));
IkReal x847=((IkReal(0.380000000000000))*(pz));
IkReal x848=((r01)*(sj1));
IkReal x849=((cj0)*(r02));
IkReal x850=((pz)*(r00));
IkReal x851=((IkReal(0.380000000000000))*(px));
IkReal x852=((IkReal(1.00000000000000))*(cj1));
IkReal x853=((cj0)*(r00));
IkReal x854=((IkReal(2.00000000000000))*(sj1));
IkReal x855=((cj0)*(r01));
IkReal x856=((IkReal(0.0361000000000000))*(cj1));
IkReal x857=((IkReal(0.0361000000000000))*(r01));
IkReal x858=((IkReal(2.00000000000000))*(py));
IkReal x859=((IkReal(0.0361000000000000))*(sj1));
IkReal x860=((cj1)*(r01));
IkReal x861=((cj1)*(px));
IkReal x862=((IkReal(2.00000000000000))*(cj1));
IkReal x863=((sj3)*(sj4));
IkReal x864=((IkReal(0.302800000000000))*(x832));
IkReal x865=((cj4)*(x833));
IkReal x866=((IkReal(0.139000000000000))*(x832));
IkReal x867=((IkReal(0.139000000000000))*(x833));
IkReal x868=((IkReal(0.302800000000000))*(x833));
IkReal x869=((r02)*(x834));
IkReal x870=((cj4)*(sj3)*(x832));
IkReal x871=((IkReal(2.00000000000000))*(r01)*(x835));
IkReal x872=((cj3)*(cj4)*(x832));
evalcond[0]=((((cj3)*(x865)))+(((sj1)*(x853)))+(((IkReal(-1.00000000000000))*(r02)*(x852)))+(((r01)*(x838)))+(x870));
evalcond[1]=((((cj3)*(x864)))+(((IkReal(-1.00000000000000))*(sj3)*(x868)))+(((cj0)*(x837)))+(((py)*(x838)))+(((IkReal(-1.00000000000000))*(pz)*(x852)))+(x866));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x840)))+(((sj3)*(x865)))+(((IkReal(-1.00000000000000))*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(x872)))+(((IkReal(-1.00000000000000))*(r01)*(x844))));
evalcond[3]=((IkReal(0.190000000000000))+(((sj3)*(x864)))+(((cj3)*(x868)))+(((IkReal(-1.00000000000000))*(pz)*(x840)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x852)))+(((IkReal(-1.00000000000000))*(py)*(x844)))+(x867));
evalcond[4]=((((x842)*(x864)))+(((IkReal(-1.00000000000000))*(x840)*(x845)))+(((x844)*(x850)))+(((IkReal(-1.00000000000000))*(pz)*(x852)*(x855)))+(((r01)*(x837)))+(((sj4)*(x866)))+(((cj0)*(cj1)*(x843)))+(((IkReal(-1.00000000000000))*(px)*(r02)*(x844)))+(((IkReal(-1.00000000000000))*(x863)*(x868))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj4)*(x867)))+(((IkReal(-1.00000000000000))*(x845)*(x852)))+(((IkReal(-1.00000000000000))*(x838)*(x850)))+(((r02)*(sj0)*(x837)))+(((IkReal(-1.00000000000000))*(x842)*(x868)))+(((IkReal(-0.190000000000000))*(x855)))+(((cj0)*(pz)*(x848)))+(((px)*(x860)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(x840)*(x843)))+(((IkReal(-1.00000000000000))*(x863)*(x864))));
evalcond[6]=((((IkReal(-1.00000000000000))*(pp)*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(r02)*(x847)))+(((py)*(x839)*(x848)))+(((r00)*(x837)*(x839)))+(((IkReal(-1.00000000000000))*(r00)*(x851)))+(((IkReal(-0.111008840000000))*(x872)))+(((IkReal(-1.00000000000000))*(x840)*(x841)))+(((IkReal(-0.380000000000000))*(py)*(r01)))+(((IkReal(-0.0841784000000000))*(cj4)*(x832)))+(((x844)*(x857)))+(((x836)*(x853)*(x862)))+(((IkReal(0.0723668400000000))*(sj3)*(x865)))+(((x844)*(x871)))+(((r02)*(x859)))+(((x839)*(x843)*(x844)))+(((x839)*(x849)*(x861)))+(((IkReal(-1.00000000000000))*(x844)*(x846)))+(((x853)*(x856)))+(((x854)*(x869)))+(((x855)*(x858)*(x861)))+(((IkReal(2.00000000000000))*(px)*(x844)*(x845))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x837)*(x839)*(x849)))+(((IkReal(-2.00000000000000))*(sj0)*(x837)*(x845)))+(((x838)*(x846)))+(((IkReal(0.0841784000000000))*(x865)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x847)))+(((IkReal(0.380000000000000))*(sj0)*(x843)))+(((IkReal(-1.00000000000000))*(x847)*(x853)))+(((IkReal(-1.00000000000000))*(r02)*(x856)))+(((IkReal(-1.00000000000000))*(x841)*(x852)))+(((IkReal(-1.00000000000000))*(x838)*(x871)))+(((IkReal(-1.00000000000000))*(x837)*(x855)*(x858)))+(((x838)*(x857)))+(((py)*(x839)*(x860)))+(((x862)*(x869)))+(((IkReal(-1.00000000000000))*(x838)*(x839)*(x843)))+(((pp)*(sj1)*(x853)))+(((IkReal(0.111008840000000))*(cj3)*(x865)))+(((x849)*(x851)))+(((r00)*(x839)*(x861)))+(((x853)*(x859)))+(((IkReal(0.0723668400000000))*(x870)))+(((IkReal(-1.00000000000000))*(x836)*(x853)*(x854))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - katana_400_6m180 (6fb84859398716c2f99f152e583c1094)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
